// Code generated by mockery v2.14.1. DO NOT EDIT.

package operatortest

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"

	oapi "github.com/exoscale/egoscale/v2/oapi"
)

// ClientWithResponsesInterface is an autogenerated mock type for the ClientWithResponsesInterface type
type ClientWithResponsesInterface struct {
	mock.Mock
}

// AddExternalSourceToSecurityGroupWithBodyWithResponse provides a mock function with given fields: ctx, id, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) AddExternalSourceToSecurityGroupWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.AddExternalSourceToSecurityGroupResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.AddExternalSourceToSecurityGroupResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) *oapi.AddExternalSourceToSecurityGroupResponse); ok {
		r0 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.AddExternalSourceToSecurityGroupResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddExternalSourceToSecurityGroupWithResponse provides a mock function with given fields: ctx, id, body, reqEditors
func (_m *ClientWithResponsesInterface) AddExternalSourceToSecurityGroupWithResponse(ctx context.Context, id string, body oapi.AddExternalSourceToSecurityGroupJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.AddExternalSourceToSecurityGroupResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.AddExternalSourceToSecurityGroupResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, oapi.AddExternalSourceToSecurityGroupJSONRequestBody, ...oapi.RequestEditorFn) *oapi.AddExternalSourceToSecurityGroupResponse); ok {
		r0 = rf(ctx, id, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.AddExternalSourceToSecurityGroupResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, oapi.AddExternalSourceToSecurityGroupJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddInstanceProtectionWithResponse provides a mock function with given fields: ctx, id, reqEditors
func (_m *ClientWithResponsesInterface) AddInstanceProtectionWithResponse(ctx context.Context, id string, reqEditors ...oapi.RequestEditorFn) (*oapi.AddInstanceProtectionResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.AddInstanceProtectionResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapi.RequestEditorFn) *oapi.AddInstanceProtectionResponse); ok {
		r0 = rf(ctx, id, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.AddInstanceProtectionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddRuleToSecurityGroupWithBodyWithResponse provides a mock function with given fields: ctx, id, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) AddRuleToSecurityGroupWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.AddRuleToSecurityGroupResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.AddRuleToSecurityGroupResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) *oapi.AddRuleToSecurityGroupResponse); ok {
		r0 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.AddRuleToSecurityGroupResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddRuleToSecurityGroupWithResponse provides a mock function with given fields: ctx, id, body, reqEditors
func (_m *ClientWithResponsesInterface) AddRuleToSecurityGroupWithResponse(ctx context.Context, id string, body oapi.AddRuleToSecurityGroupJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.AddRuleToSecurityGroupResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.AddRuleToSecurityGroupResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, oapi.AddRuleToSecurityGroupJSONRequestBody, ...oapi.RequestEditorFn) *oapi.AddRuleToSecurityGroupResponse); ok {
		r0 = rf(ctx, id, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.AddRuleToSecurityGroupResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, oapi.AddRuleToSecurityGroupJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddServiceToLoadBalancerWithBodyWithResponse provides a mock function with given fields: ctx, id, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) AddServiceToLoadBalancerWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.AddServiceToLoadBalancerResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.AddServiceToLoadBalancerResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) *oapi.AddServiceToLoadBalancerResponse); ok {
		r0 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.AddServiceToLoadBalancerResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddServiceToLoadBalancerWithResponse provides a mock function with given fields: ctx, id, body, reqEditors
func (_m *ClientWithResponsesInterface) AddServiceToLoadBalancerWithResponse(ctx context.Context, id string, body oapi.AddServiceToLoadBalancerJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.AddServiceToLoadBalancerResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.AddServiceToLoadBalancerResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, oapi.AddServiceToLoadBalancerJSONRequestBody, ...oapi.RequestEditorFn) *oapi.AddServiceToLoadBalancerResponse); ok {
		r0 = rf(ctx, id, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.AddServiceToLoadBalancerResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, oapi.AddServiceToLoadBalancerJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttachInstanceToElasticIpWithBodyWithResponse provides a mock function with given fields: ctx, id, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) AttachInstanceToElasticIpWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.AttachInstanceToElasticIpResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.AttachInstanceToElasticIpResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) *oapi.AttachInstanceToElasticIpResponse); ok {
		r0 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.AttachInstanceToElasticIpResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttachInstanceToElasticIpWithResponse provides a mock function with given fields: ctx, id, body, reqEditors
func (_m *ClientWithResponsesInterface) AttachInstanceToElasticIpWithResponse(ctx context.Context, id string, body oapi.AttachInstanceToElasticIpJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.AttachInstanceToElasticIpResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.AttachInstanceToElasticIpResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, oapi.AttachInstanceToElasticIpJSONRequestBody, ...oapi.RequestEditorFn) *oapi.AttachInstanceToElasticIpResponse); ok {
		r0 = rf(ctx, id, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.AttachInstanceToElasticIpResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, oapi.AttachInstanceToElasticIpJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttachInstanceToPrivateNetworkWithBodyWithResponse provides a mock function with given fields: ctx, id, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) AttachInstanceToPrivateNetworkWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.AttachInstanceToPrivateNetworkResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.AttachInstanceToPrivateNetworkResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) *oapi.AttachInstanceToPrivateNetworkResponse); ok {
		r0 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.AttachInstanceToPrivateNetworkResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttachInstanceToPrivateNetworkWithResponse provides a mock function with given fields: ctx, id, body, reqEditors
func (_m *ClientWithResponsesInterface) AttachInstanceToPrivateNetworkWithResponse(ctx context.Context, id string, body oapi.AttachInstanceToPrivateNetworkJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.AttachInstanceToPrivateNetworkResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.AttachInstanceToPrivateNetworkResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, oapi.AttachInstanceToPrivateNetworkJSONRequestBody, ...oapi.RequestEditorFn) *oapi.AttachInstanceToPrivateNetworkResponse); ok {
		r0 = rf(ctx, id, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.AttachInstanceToPrivateNetworkResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, oapi.AttachInstanceToPrivateNetworkJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttachInstanceToSecurityGroupWithBodyWithResponse provides a mock function with given fields: ctx, id, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) AttachInstanceToSecurityGroupWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.AttachInstanceToSecurityGroupResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.AttachInstanceToSecurityGroupResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) *oapi.AttachInstanceToSecurityGroupResponse); ok {
		r0 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.AttachInstanceToSecurityGroupResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttachInstanceToSecurityGroupWithResponse provides a mock function with given fields: ctx, id, body, reqEditors
func (_m *ClientWithResponsesInterface) AttachInstanceToSecurityGroupWithResponse(ctx context.Context, id string, body oapi.AttachInstanceToSecurityGroupJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.AttachInstanceToSecurityGroupResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.AttachInstanceToSecurityGroupResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, oapi.AttachInstanceToSecurityGroupJSONRequestBody, ...oapi.RequestEditorFn) *oapi.AttachInstanceToSecurityGroupResponse); ok {
		r0 = rf(ctx, id, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.AttachInstanceToSecurityGroupResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, oapi.AttachInstanceToSecurityGroupJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CopyTemplateWithBodyWithResponse provides a mock function with given fields: ctx, id, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) CopyTemplateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.CopyTemplateResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.CopyTemplateResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) *oapi.CopyTemplateResponse); ok {
		r0 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.CopyTemplateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CopyTemplateWithResponse provides a mock function with given fields: ctx, id, body, reqEditors
func (_m *ClientWithResponsesInterface) CopyTemplateWithResponse(ctx context.Context, id string, body oapi.CopyTemplateJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.CopyTemplateResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.CopyTemplateResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, oapi.CopyTemplateJSONRequestBody, ...oapi.RequestEditorFn) *oapi.CopyTemplateResponse); ok {
		r0 = rf(ctx, id, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.CopyTemplateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, oapi.CopyTemplateJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAccessKeyWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateAccessKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.CreateAccessKeyResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.CreateAccessKeyResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...oapi.RequestEditorFn) *oapi.CreateAccessKeyResponse); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.CreateAccessKeyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAccessKeyWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateAccessKeyWithResponse(ctx context.Context, body oapi.CreateAccessKeyJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.CreateAccessKeyResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.CreateAccessKeyResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.CreateAccessKeyJSONRequestBody, ...oapi.RequestEditorFn) *oapi.CreateAccessKeyResponse); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.CreateAccessKeyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.CreateAccessKeyJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAntiAffinityGroupWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateAntiAffinityGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.CreateAntiAffinityGroupResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.CreateAntiAffinityGroupResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...oapi.RequestEditorFn) *oapi.CreateAntiAffinityGroupResponse); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.CreateAntiAffinityGroupResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAntiAffinityGroupWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateAntiAffinityGroupWithResponse(ctx context.Context, body oapi.CreateAntiAffinityGroupJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.CreateAntiAffinityGroupResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.CreateAntiAffinityGroupResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.CreateAntiAffinityGroupJSONRequestBody, ...oapi.RequestEditorFn) *oapi.CreateAntiAffinityGroupResponse); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.CreateAntiAffinityGroupResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.CreateAntiAffinityGroupJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateApiKeyWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateApiKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.CreateApiKeyResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.CreateApiKeyResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...oapi.RequestEditorFn) *oapi.CreateApiKeyResponse); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.CreateApiKeyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateApiKeyWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateApiKeyWithResponse(ctx context.Context, body oapi.CreateApiKeyJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.CreateApiKeyResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.CreateApiKeyResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.CreateApiKeyJSONRequestBody, ...oapi.RequestEditorFn) *oapi.CreateApiKeyResponse); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.CreateApiKeyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.CreateApiKeyJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDbaasIntegrationWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateDbaasIntegrationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.CreateDbaasIntegrationResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.CreateDbaasIntegrationResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...oapi.RequestEditorFn) *oapi.CreateDbaasIntegrationResponse); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.CreateDbaasIntegrationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDbaasIntegrationWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateDbaasIntegrationWithResponse(ctx context.Context, body oapi.CreateDbaasIntegrationJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.CreateDbaasIntegrationResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.CreateDbaasIntegrationResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.CreateDbaasIntegrationJSONRequestBody, ...oapi.RequestEditorFn) *oapi.CreateDbaasIntegrationResponse); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.CreateDbaasIntegrationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.CreateDbaasIntegrationJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDbaasKafkaSchemaRegistryAclConfigWithBodyWithResponse provides a mock function with given fields: ctx, name, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateDbaasKafkaSchemaRegistryAclConfigWithBodyWithResponse(ctx context.Context, name oapi.DbaasServiceName, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.CreateDbaasKafkaSchemaRegistryAclConfigResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.CreateDbaasKafkaSchemaRegistryAclConfigResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, string, io.Reader, ...oapi.RequestEditorFn) *oapi.CreateDbaasKafkaSchemaRegistryAclConfigResponse); ok {
		r0 = rf(ctx, name, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.CreateDbaasKafkaSchemaRegistryAclConfigResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, name, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDbaasKafkaSchemaRegistryAclConfigWithResponse provides a mock function with given fields: ctx, name, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateDbaasKafkaSchemaRegistryAclConfigWithResponse(ctx context.Context, name oapi.DbaasServiceName, body oapi.CreateDbaasKafkaSchemaRegistryAclConfigJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.CreateDbaasKafkaSchemaRegistryAclConfigResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.CreateDbaasKafkaSchemaRegistryAclConfigResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, oapi.CreateDbaasKafkaSchemaRegistryAclConfigJSONRequestBody, ...oapi.RequestEditorFn) *oapi.CreateDbaasKafkaSchemaRegistryAclConfigResponse); ok {
		r0 = rf(ctx, name, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.CreateDbaasKafkaSchemaRegistryAclConfigResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, oapi.CreateDbaasKafkaSchemaRegistryAclConfigJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, name, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDbaasKafkaTopicAclConfigWithBodyWithResponse provides a mock function with given fields: ctx, name, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateDbaasKafkaTopicAclConfigWithBodyWithResponse(ctx context.Context, name oapi.DbaasServiceName, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.CreateDbaasKafkaTopicAclConfigResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.CreateDbaasKafkaTopicAclConfigResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, string, io.Reader, ...oapi.RequestEditorFn) *oapi.CreateDbaasKafkaTopicAclConfigResponse); ok {
		r0 = rf(ctx, name, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.CreateDbaasKafkaTopicAclConfigResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, name, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDbaasKafkaTopicAclConfigWithResponse provides a mock function with given fields: ctx, name, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateDbaasKafkaTopicAclConfigWithResponse(ctx context.Context, name oapi.DbaasServiceName, body oapi.CreateDbaasKafkaTopicAclConfigJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.CreateDbaasKafkaTopicAclConfigResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.CreateDbaasKafkaTopicAclConfigResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, oapi.CreateDbaasKafkaTopicAclConfigJSONRequestBody, ...oapi.RequestEditorFn) *oapi.CreateDbaasKafkaTopicAclConfigResponse); ok {
		r0 = rf(ctx, name, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.CreateDbaasKafkaTopicAclConfigResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, oapi.CreateDbaasKafkaTopicAclConfigJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, name, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDbaasKafkaUserWithBodyWithResponse provides a mock function with given fields: ctx, serviceName, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateDbaasKafkaUserWithBodyWithResponse(ctx context.Context, serviceName oapi.DbaasServiceName, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.CreateDbaasKafkaUserResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, serviceName, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.CreateDbaasKafkaUserResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, string, io.Reader, ...oapi.RequestEditorFn) *oapi.CreateDbaasKafkaUserResponse); ok {
		r0 = rf(ctx, serviceName, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.CreateDbaasKafkaUserResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, serviceName, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDbaasKafkaUserWithResponse provides a mock function with given fields: ctx, serviceName, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateDbaasKafkaUserWithResponse(ctx context.Context, serviceName oapi.DbaasServiceName, body oapi.CreateDbaasKafkaUserJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.CreateDbaasKafkaUserResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, serviceName, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.CreateDbaasKafkaUserResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, oapi.CreateDbaasKafkaUserJSONRequestBody, ...oapi.RequestEditorFn) *oapi.CreateDbaasKafkaUserResponse); ok {
		r0 = rf(ctx, serviceName, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.CreateDbaasKafkaUserResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, oapi.CreateDbaasKafkaUserJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, serviceName, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDbaasMysqlUserWithBodyWithResponse provides a mock function with given fields: ctx, serviceName, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateDbaasMysqlUserWithBodyWithResponse(ctx context.Context, serviceName oapi.DbaasServiceName, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.CreateDbaasMysqlUserResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, serviceName, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.CreateDbaasMysqlUserResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, string, io.Reader, ...oapi.RequestEditorFn) *oapi.CreateDbaasMysqlUserResponse); ok {
		r0 = rf(ctx, serviceName, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.CreateDbaasMysqlUserResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, serviceName, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDbaasMysqlUserWithResponse provides a mock function with given fields: ctx, serviceName, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateDbaasMysqlUserWithResponse(ctx context.Context, serviceName oapi.DbaasServiceName, body oapi.CreateDbaasMysqlUserJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.CreateDbaasMysqlUserResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, serviceName, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.CreateDbaasMysqlUserResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, oapi.CreateDbaasMysqlUserJSONRequestBody, ...oapi.RequestEditorFn) *oapi.CreateDbaasMysqlUserResponse); ok {
		r0 = rf(ctx, serviceName, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.CreateDbaasMysqlUserResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, oapi.CreateDbaasMysqlUserJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, serviceName, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDbaasOpensearchUserWithBodyWithResponse provides a mock function with given fields: ctx, serviceName, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateDbaasOpensearchUserWithBodyWithResponse(ctx context.Context, serviceName oapi.DbaasServiceName, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.CreateDbaasOpensearchUserResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, serviceName, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.CreateDbaasOpensearchUserResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, string, io.Reader, ...oapi.RequestEditorFn) *oapi.CreateDbaasOpensearchUserResponse); ok {
		r0 = rf(ctx, serviceName, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.CreateDbaasOpensearchUserResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, serviceName, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDbaasOpensearchUserWithResponse provides a mock function with given fields: ctx, serviceName, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateDbaasOpensearchUserWithResponse(ctx context.Context, serviceName oapi.DbaasServiceName, body oapi.CreateDbaasOpensearchUserJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.CreateDbaasOpensearchUserResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, serviceName, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.CreateDbaasOpensearchUserResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, oapi.CreateDbaasOpensearchUserJSONRequestBody, ...oapi.RequestEditorFn) *oapi.CreateDbaasOpensearchUserResponse); ok {
		r0 = rf(ctx, serviceName, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.CreateDbaasOpensearchUserResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, oapi.CreateDbaasOpensearchUserJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, serviceName, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDbaasPgConnectionPoolWithBodyWithResponse provides a mock function with given fields: ctx, serviceName, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateDbaasPgConnectionPoolWithBodyWithResponse(ctx context.Context, serviceName oapi.DbaasServiceName, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.CreateDbaasPgConnectionPoolResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, serviceName, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.CreateDbaasPgConnectionPoolResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, string, io.Reader, ...oapi.RequestEditorFn) *oapi.CreateDbaasPgConnectionPoolResponse); ok {
		r0 = rf(ctx, serviceName, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.CreateDbaasPgConnectionPoolResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, serviceName, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDbaasPgConnectionPoolWithResponse provides a mock function with given fields: ctx, serviceName, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateDbaasPgConnectionPoolWithResponse(ctx context.Context, serviceName oapi.DbaasServiceName, body oapi.CreateDbaasPgConnectionPoolJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.CreateDbaasPgConnectionPoolResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, serviceName, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.CreateDbaasPgConnectionPoolResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, oapi.CreateDbaasPgConnectionPoolJSONRequestBody, ...oapi.RequestEditorFn) *oapi.CreateDbaasPgConnectionPoolResponse); ok {
		r0 = rf(ctx, serviceName, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.CreateDbaasPgConnectionPoolResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, oapi.CreateDbaasPgConnectionPoolJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, serviceName, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDbaasPostgresUserWithBodyWithResponse provides a mock function with given fields: ctx, serviceName, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateDbaasPostgresUserWithBodyWithResponse(ctx context.Context, serviceName oapi.DbaasServiceName, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.CreateDbaasPostgresUserResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, serviceName, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.CreateDbaasPostgresUserResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, string, io.Reader, ...oapi.RequestEditorFn) *oapi.CreateDbaasPostgresUserResponse); ok {
		r0 = rf(ctx, serviceName, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.CreateDbaasPostgresUserResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, serviceName, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDbaasPostgresUserWithResponse provides a mock function with given fields: ctx, serviceName, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateDbaasPostgresUserWithResponse(ctx context.Context, serviceName oapi.DbaasServiceName, body oapi.CreateDbaasPostgresUserJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.CreateDbaasPostgresUserResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, serviceName, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.CreateDbaasPostgresUserResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, oapi.CreateDbaasPostgresUserJSONRequestBody, ...oapi.RequestEditorFn) *oapi.CreateDbaasPostgresUserResponse); ok {
		r0 = rf(ctx, serviceName, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.CreateDbaasPostgresUserResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, oapi.CreateDbaasPostgresUserJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, serviceName, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDbaasServiceGrafanaWithBodyWithResponse provides a mock function with given fields: ctx, name, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateDbaasServiceGrafanaWithBodyWithResponse(ctx context.Context, name oapi.DbaasServiceName, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.CreateDbaasServiceGrafanaResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.CreateDbaasServiceGrafanaResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, string, io.Reader, ...oapi.RequestEditorFn) *oapi.CreateDbaasServiceGrafanaResponse); ok {
		r0 = rf(ctx, name, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.CreateDbaasServiceGrafanaResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, name, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDbaasServiceGrafanaWithResponse provides a mock function with given fields: ctx, name, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateDbaasServiceGrafanaWithResponse(ctx context.Context, name oapi.DbaasServiceName, body oapi.CreateDbaasServiceGrafanaJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.CreateDbaasServiceGrafanaResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.CreateDbaasServiceGrafanaResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, oapi.CreateDbaasServiceGrafanaJSONRequestBody, ...oapi.RequestEditorFn) *oapi.CreateDbaasServiceGrafanaResponse); ok {
		r0 = rf(ctx, name, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.CreateDbaasServiceGrafanaResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, oapi.CreateDbaasServiceGrafanaJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, name, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDbaasServiceKafkaWithBodyWithResponse provides a mock function with given fields: ctx, name, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateDbaasServiceKafkaWithBodyWithResponse(ctx context.Context, name oapi.DbaasServiceName, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.CreateDbaasServiceKafkaResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.CreateDbaasServiceKafkaResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, string, io.Reader, ...oapi.RequestEditorFn) *oapi.CreateDbaasServiceKafkaResponse); ok {
		r0 = rf(ctx, name, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.CreateDbaasServiceKafkaResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, name, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDbaasServiceKafkaWithResponse provides a mock function with given fields: ctx, name, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateDbaasServiceKafkaWithResponse(ctx context.Context, name oapi.DbaasServiceName, body oapi.CreateDbaasServiceKafkaJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.CreateDbaasServiceKafkaResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.CreateDbaasServiceKafkaResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, oapi.CreateDbaasServiceKafkaJSONRequestBody, ...oapi.RequestEditorFn) *oapi.CreateDbaasServiceKafkaResponse); ok {
		r0 = rf(ctx, name, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.CreateDbaasServiceKafkaResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, oapi.CreateDbaasServiceKafkaJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, name, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDbaasServiceMysqlWithBodyWithResponse provides a mock function with given fields: ctx, name, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateDbaasServiceMysqlWithBodyWithResponse(ctx context.Context, name oapi.DbaasServiceName, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.CreateDbaasServiceMysqlResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.CreateDbaasServiceMysqlResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, string, io.Reader, ...oapi.RequestEditorFn) *oapi.CreateDbaasServiceMysqlResponse); ok {
		r0 = rf(ctx, name, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.CreateDbaasServiceMysqlResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, name, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDbaasServiceMysqlWithResponse provides a mock function with given fields: ctx, name, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateDbaasServiceMysqlWithResponse(ctx context.Context, name oapi.DbaasServiceName, body oapi.CreateDbaasServiceMysqlJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.CreateDbaasServiceMysqlResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.CreateDbaasServiceMysqlResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, oapi.CreateDbaasServiceMysqlJSONRequestBody, ...oapi.RequestEditorFn) *oapi.CreateDbaasServiceMysqlResponse); ok {
		r0 = rf(ctx, name, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.CreateDbaasServiceMysqlResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, oapi.CreateDbaasServiceMysqlJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, name, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDbaasServiceOpensearchWithBodyWithResponse provides a mock function with given fields: ctx, name, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateDbaasServiceOpensearchWithBodyWithResponse(ctx context.Context, name oapi.DbaasServiceName, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.CreateDbaasServiceOpensearchResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.CreateDbaasServiceOpensearchResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, string, io.Reader, ...oapi.RequestEditorFn) *oapi.CreateDbaasServiceOpensearchResponse); ok {
		r0 = rf(ctx, name, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.CreateDbaasServiceOpensearchResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, name, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDbaasServiceOpensearchWithResponse provides a mock function with given fields: ctx, name, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateDbaasServiceOpensearchWithResponse(ctx context.Context, name oapi.DbaasServiceName, body oapi.CreateDbaasServiceOpensearchJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.CreateDbaasServiceOpensearchResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.CreateDbaasServiceOpensearchResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, oapi.CreateDbaasServiceOpensearchJSONRequestBody, ...oapi.RequestEditorFn) *oapi.CreateDbaasServiceOpensearchResponse); ok {
		r0 = rf(ctx, name, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.CreateDbaasServiceOpensearchResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, oapi.CreateDbaasServiceOpensearchJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, name, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDbaasServicePgWithBodyWithResponse provides a mock function with given fields: ctx, name, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateDbaasServicePgWithBodyWithResponse(ctx context.Context, name oapi.DbaasServiceName, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.CreateDbaasServicePgResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.CreateDbaasServicePgResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, string, io.Reader, ...oapi.RequestEditorFn) *oapi.CreateDbaasServicePgResponse); ok {
		r0 = rf(ctx, name, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.CreateDbaasServicePgResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, name, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDbaasServicePgWithResponse provides a mock function with given fields: ctx, name, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateDbaasServicePgWithResponse(ctx context.Context, name oapi.DbaasServiceName, body oapi.CreateDbaasServicePgJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.CreateDbaasServicePgResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.CreateDbaasServicePgResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, oapi.CreateDbaasServicePgJSONRequestBody, ...oapi.RequestEditorFn) *oapi.CreateDbaasServicePgResponse); ok {
		r0 = rf(ctx, name, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.CreateDbaasServicePgResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, oapi.CreateDbaasServicePgJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, name, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDbaasServiceRedisWithBodyWithResponse provides a mock function with given fields: ctx, name, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateDbaasServiceRedisWithBodyWithResponse(ctx context.Context, name oapi.DbaasServiceName, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.CreateDbaasServiceRedisResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.CreateDbaasServiceRedisResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, string, io.Reader, ...oapi.RequestEditorFn) *oapi.CreateDbaasServiceRedisResponse); ok {
		r0 = rf(ctx, name, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.CreateDbaasServiceRedisResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, name, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDbaasServiceRedisWithResponse provides a mock function with given fields: ctx, name, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateDbaasServiceRedisWithResponse(ctx context.Context, name oapi.DbaasServiceName, body oapi.CreateDbaasServiceRedisJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.CreateDbaasServiceRedisResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.CreateDbaasServiceRedisResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, oapi.CreateDbaasServiceRedisJSONRequestBody, ...oapi.RequestEditorFn) *oapi.CreateDbaasServiceRedisResponse); ok {
		r0 = rf(ctx, name, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.CreateDbaasServiceRedisResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, oapi.CreateDbaasServiceRedisJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, name, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDbaasTaskMigrationCheckWithBodyWithResponse provides a mock function with given fields: ctx, service, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateDbaasTaskMigrationCheckWithBodyWithResponse(ctx context.Context, service oapi.DbaasServiceName, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.CreateDbaasTaskMigrationCheckResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, service, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.CreateDbaasTaskMigrationCheckResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, string, io.Reader, ...oapi.RequestEditorFn) *oapi.CreateDbaasTaskMigrationCheckResponse); ok {
		r0 = rf(ctx, service, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.CreateDbaasTaskMigrationCheckResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, service, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDbaasTaskMigrationCheckWithResponse provides a mock function with given fields: ctx, service, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateDbaasTaskMigrationCheckWithResponse(ctx context.Context, service oapi.DbaasServiceName, body oapi.CreateDbaasTaskMigrationCheckJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.CreateDbaasTaskMigrationCheckResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, service, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.CreateDbaasTaskMigrationCheckResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, oapi.CreateDbaasTaskMigrationCheckJSONRequestBody, ...oapi.RequestEditorFn) *oapi.CreateDbaasTaskMigrationCheckResponse); ok {
		r0 = rf(ctx, service, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.CreateDbaasTaskMigrationCheckResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, oapi.CreateDbaasTaskMigrationCheckJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, service, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDnsDomainRecordWithBodyWithResponse provides a mock function with given fields: ctx, domainId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateDnsDomainRecordWithBodyWithResponse(ctx context.Context, domainId string, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.CreateDnsDomainRecordResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, domainId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.CreateDnsDomainRecordResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) *oapi.CreateDnsDomainRecordResponse); ok {
		r0 = rf(ctx, domainId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.CreateDnsDomainRecordResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, domainId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDnsDomainRecordWithResponse provides a mock function with given fields: ctx, domainId, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateDnsDomainRecordWithResponse(ctx context.Context, domainId string, body oapi.CreateDnsDomainRecordJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.CreateDnsDomainRecordResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, domainId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.CreateDnsDomainRecordResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, oapi.CreateDnsDomainRecordJSONRequestBody, ...oapi.RequestEditorFn) *oapi.CreateDnsDomainRecordResponse); ok {
		r0 = rf(ctx, domainId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.CreateDnsDomainRecordResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, oapi.CreateDnsDomainRecordJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, domainId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDnsDomainWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateDnsDomainWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.CreateDnsDomainResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.CreateDnsDomainResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...oapi.RequestEditorFn) *oapi.CreateDnsDomainResponse); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.CreateDnsDomainResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDnsDomainWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateDnsDomainWithResponse(ctx context.Context, body oapi.CreateDnsDomainJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.CreateDnsDomainResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.CreateDnsDomainResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.CreateDnsDomainJSONRequestBody, ...oapi.RequestEditorFn) *oapi.CreateDnsDomainResponse); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.CreateDnsDomainResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.CreateDnsDomainJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateElasticIpWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateElasticIpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.CreateElasticIpResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.CreateElasticIpResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...oapi.RequestEditorFn) *oapi.CreateElasticIpResponse); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.CreateElasticIpResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateElasticIpWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateElasticIpWithResponse(ctx context.Context, body oapi.CreateElasticIpJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.CreateElasticIpResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.CreateElasticIpResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.CreateElasticIpJSONRequestBody, ...oapi.RequestEditorFn) *oapi.CreateElasticIpResponse); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.CreateElasticIpResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.CreateElasticIpJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateIamRoleWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateIamRoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.CreateIamRoleResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.CreateIamRoleResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...oapi.RequestEditorFn) *oapi.CreateIamRoleResponse); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.CreateIamRoleResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateIamRoleWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateIamRoleWithResponse(ctx context.Context, body oapi.CreateIamRoleJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.CreateIamRoleResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.CreateIamRoleResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.CreateIamRoleJSONRequestBody, ...oapi.RequestEditorFn) *oapi.CreateIamRoleResponse); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.CreateIamRoleResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.CreateIamRoleJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateInstancePoolWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateInstancePoolWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.CreateInstancePoolResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.CreateInstancePoolResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...oapi.RequestEditorFn) *oapi.CreateInstancePoolResponse); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.CreateInstancePoolResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateInstancePoolWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateInstancePoolWithResponse(ctx context.Context, body oapi.CreateInstancePoolJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.CreateInstancePoolResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.CreateInstancePoolResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.CreateInstancePoolJSONRequestBody, ...oapi.RequestEditorFn) *oapi.CreateInstancePoolResponse); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.CreateInstancePoolResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.CreateInstancePoolJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateInstanceWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.CreateInstanceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.CreateInstanceResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...oapi.RequestEditorFn) *oapi.CreateInstanceResponse); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.CreateInstanceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateInstanceWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateInstanceWithResponse(ctx context.Context, body oapi.CreateInstanceJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.CreateInstanceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.CreateInstanceResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.CreateInstanceJSONRequestBody, ...oapi.RequestEditorFn) *oapi.CreateInstanceResponse); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.CreateInstanceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.CreateInstanceJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLoadBalancerWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateLoadBalancerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.CreateLoadBalancerResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.CreateLoadBalancerResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...oapi.RequestEditorFn) *oapi.CreateLoadBalancerResponse); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.CreateLoadBalancerResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLoadBalancerWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateLoadBalancerWithResponse(ctx context.Context, body oapi.CreateLoadBalancerJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.CreateLoadBalancerResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.CreateLoadBalancerResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.CreateLoadBalancerJSONRequestBody, ...oapi.RequestEditorFn) *oapi.CreateLoadBalancerResponse); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.CreateLoadBalancerResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.CreateLoadBalancerJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePrivateNetworkWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) CreatePrivateNetworkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.CreatePrivateNetworkResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.CreatePrivateNetworkResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...oapi.RequestEditorFn) *oapi.CreatePrivateNetworkResponse); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.CreatePrivateNetworkResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePrivateNetworkWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *ClientWithResponsesInterface) CreatePrivateNetworkWithResponse(ctx context.Context, body oapi.CreatePrivateNetworkJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.CreatePrivateNetworkResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.CreatePrivateNetworkResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.CreatePrivateNetworkJSONRequestBody, ...oapi.RequestEditorFn) *oapi.CreatePrivateNetworkResponse); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.CreatePrivateNetworkResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.CreatePrivateNetworkJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSecurityGroupWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateSecurityGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.CreateSecurityGroupResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.CreateSecurityGroupResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...oapi.RequestEditorFn) *oapi.CreateSecurityGroupResponse); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.CreateSecurityGroupResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSecurityGroupWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateSecurityGroupWithResponse(ctx context.Context, body oapi.CreateSecurityGroupJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.CreateSecurityGroupResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.CreateSecurityGroupResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.CreateSecurityGroupJSONRequestBody, ...oapi.RequestEditorFn) *oapi.CreateSecurityGroupResponse); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.CreateSecurityGroupResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.CreateSecurityGroupJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSksClusterWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateSksClusterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.CreateSksClusterResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.CreateSksClusterResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...oapi.RequestEditorFn) *oapi.CreateSksClusterResponse); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.CreateSksClusterResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSksClusterWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateSksClusterWithResponse(ctx context.Context, body oapi.CreateSksClusterJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.CreateSksClusterResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.CreateSksClusterResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.CreateSksClusterJSONRequestBody, ...oapi.RequestEditorFn) *oapi.CreateSksClusterResponse); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.CreateSksClusterResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.CreateSksClusterJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSksNodepoolWithBodyWithResponse provides a mock function with given fields: ctx, id, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateSksNodepoolWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.CreateSksNodepoolResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.CreateSksNodepoolResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) *oapi.CreateSksNodepoolResponse); ok {
		r0 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.CreateSksNodepoolResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSksNodepoolWithResponse provides a mock function with given fields: ctx, id, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateSksNodepoolWithResponse(ctx context.Context, id string, body oapi.CreateSksNodepoolJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.CreateSksNodepoolResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.CreateSksNodepoolResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, oapi.CreateSksNodepoolJSONRequestBody, ...oapi.RequestEditorFn) *oapi.CreateSksNodepoolResponse); ok {
		r0 = rf(ctx, id, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.CreateSksNodepoolResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, oapi.CreateSksNodepoolJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSnapshotWithResponse provides a mock function with given fields: ctx, id, reqEditors
func (_m *ClientWithResponsesInterface) CreateSnapshotWithResponse(ctx context.Context, id string, reqEditors ...oapi.RequestEditorFn) (*oapi.CreateSnapshotResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.CreateSnapshotResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapi.RequestEditorFn) *oapi.CreateSnapshotResponse); ok {
		r0 = rf(ctx, id, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.CreateSnapshotResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAntiAffinityGroupWithResponse provides a mock function with given fields: ctx, id, reqEditors
func (_m *ClientWithResponsesInterface) DeleteAntiAffinityGroupWithResponse(ctx context.Context, id string, reqEditors ...oapi.RequestEditorFn) (*oapi.DeleteAntiAffinityGroupResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.DeleteAntiAffinityGroupResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapi.RequestEditorFn) *oapi.DeleteAntiAffinityGroupResponse); ok {
		r0 = rf(ctx, id, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.DeleteAntiAffinityGroupResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteApiKeyWithResponse provides a mock function with given fields: ctx, id, reqEditors
func (_m *ClientWithResponsesInterface) DeleteApiKeyWithResponse(ctx context.Context, id string, reqEditors ...oapi.RequestEditorFn) (*oapi.DeleteApiKeyResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.DeleteApiKeyResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapi.RequestEditorFn) *oapi.DeleteApiKeyResponse); ok {
		r0 = rf(ctx, id, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.DeleteApiKeyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDbaasIntegrationWithResponse provides a mock function with given fields: ctx, id, reqEditors
func (_m *ClientWithResponsesInterface) DeleteDbaasIntegrationWithResponse(ctx context.Context, id string, reqEditors ...oapi.RequestEditorFn) (*oapi.DeleteDbaasIntegrationResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.DeleteDbaasIntegrationResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapi.RequestEditorFn) *oapi.DeleteDbaasIntegrationResponse); ok {
		r0 = rf(ctx, id, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.DeleteDbaasIntegrationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDbaasKafkaSchemaRegistryAclConfigWithResponse provides a mock function with given fields: ctx, name, aclId, reqEditors
func (_m *ClientWithResponsesInterface) DeleteDbaasKafkaSchemaRegistryAclConfigWithResponse(ctx context.Context, name oapi.DbaasServiceName, aclId oapi.DbaasKafkaAclId, reqEditors ...oapi.RequestEditorFn) (*oapi.DeleteDbaasKafkaSchemaRegistryAclConfigResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name, aclId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.DeleteDbaasKafkaSchemaRegistryAclConfigResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, oapi.DbaasKafkaAclId, ...oapi.RequestEditorFn) *oapi.DeleteDbaasKafkaSchemaRegistryAclConfigResponse); ok {
		r0 = rf(ctx, name, aclId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.DeleteDbaasKafkaSchemaRegistryAclConfigResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, oapi.DbaasKafkaAclId, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, name, aclId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDbaasKafkaTopicAclConfigWithResponse provides a mock function with given fields: ctx, name, aclId, reqEditors
func (_m *ClientWithResponsesInterface) DeleteDbaasKafkaTopicAclConfigWithResponse(ctx context.Context, name oapi.DbaasServiceName, aclId oapi.DbaasKafkaAclId, reqEditors ...oapi.RequestEditorFn) (*oapi.DeleteDbaasKafkaTopicAclConfigResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name, aclId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.DeleteDbaasKafkaTopicAclConfigResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, oapi.DbaasKafkaAclId, ...oapi.RequestEditorFn) *oapi.DeleteDbaasKafkaTopicAclConfigResponse); ok {
		r0 = rf(ctx, name, aclId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.DeleteDbaasKafkaTopicAclConfigResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, oapi.DbaasKafkaAclId, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, name, aclId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDbaasKafkaUserWithResponse provides a mock function with given fields: ctx, serviceName, username, reqEditors
func (_m *ClientWithResponsesInterface) DeleteDbaasKafkaUserWithResponse(ctx context.Context, serviceName oapi.DbaasServiceName, username oapi.DbaasUserUsername, reqEditors ...oapi.RequestEditorFn) (*oapi.DeleteDbaasKafkaUserResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, serviceName, username)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.DeleteDbaasKafkaUserResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, oapi.DbaasUserUsername, ...oapi.RequestEditorFn) *oapi.DeleteDbaasKafkaUserResponse); ok {
		r0 = rf(ctx, serviceName, username, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.DeleteDbaasKafkaUserResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, oapi.DbaasUserUsername, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, serviceName, username, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDbaasMysqlUserWithResponse provides a mock function with given fields: ctx, serviceName, username, reqEditors
func (_m *ClientWithResponsesInterface) DeleteDbaasMysqlUserWithResponse(ctx context.Context, serviceName oapi.DbaasServiceName, username oapi.DbaasUserUsername, reqEditors ...oapi.RequestEditorFn) (*oapi.DeleteDbaasMysqlUserResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, serviceName, username)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.DeleteDbaasMysqlUserResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, oapi.DbaasUserUsername, ...oapi.RequestEditorFn) *oapi.DeleteDbaasMysqlUserResponse); ok {
		r0 = rf(ctx, serviceName, username, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.DeleteDbaasMysqlUserResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, oapi.DbaasUserUsername, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, serviceName, username, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDbaasOpensearchUserWithResponse provides a mock function with given fields: ctx, serviceName, username, reqEditors
func (_m *ClientWithResponsesInterface) DeleteDbaasOpensearchUserWithResponse(ctx context.Context, serviceName oapi.DbaasServiceName, username oapi.DbaasUserUsername, reqEditors ...oapi.RequestEditorFn) (*oapi.DeleteDbaasOpensearchUserResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, serviceName, username)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.DeleteDbaasOpensearchUserResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, oapi.DbaasUserUsername, ...oapi.RequestEditorFn) *oapi.DeleteDbaasOpensearchUserResponse); ok {
		r0 = rf(ctx, serviceName, username, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.DeleteDbaasOpensearchUserResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, oapi.DbaasUserUsername, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, serviceName, username, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDbaasPgConnectionPoolWithResponse provides a mock function with given fields: ctx, serviceName, connectionPoolName, reqEditors
func (_m *ClientWithResponsesInterface) DeleteDbaasPgConnectionPoolWithResponse(ctx context.Context, serviceName oapi.DbaasServiceName, connectionPoolName oapi.DbaasPgPoolName, reqEditors ...oapi.RequestEditorFn) (*oapi.DeleteDbaasPgConnectionPoolResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, serviceName, connectionPoolName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.DeleteDbaasPgConnectionPoolResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, oapi.DbaasPgPoolName, ...oapi.RequestEditorFn) *oapi.DeleteDbaasPgConnectionPoolResponse); ok {
		r0 = rf(ctx, serviceName, connectionPoolName, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.DeleteDbaasPgConnectionPoolResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, oapi.DbaasPgPoolName, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, serviceName, connectionPoolName, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDbaasPostgresUserWithResponse provides a mock function with given fields: ctx, serviceName, username, reqEditors
func (_m *ClientWithResponsesInterface) DeleteDbaasPostgresUserWithResponse(ctx context.Context, serviceName oapi.DbaasServiceName, username oapi.DbaasUserUsername, reqEditors ...oapi.RequestEditorFn) (*oapi.DeleteDbaasPostgresUserResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, serviceName, username)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.DeleteDbaasPostgresUserResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, oapi.DbaasUserUsername, ...oapi.RequestEditorFn) *oapi.DeleteDbaasPostgresUserResponse); ok {
		r0 = rf(ctx, serviceName, username, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.DeleteDbaasPostgresUserResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, oapi.DbaasUserUsername, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, serviceName, username, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDbaasServiceGrafanaWithResponse provides a mock function with given fields: ctx, name, reqEditors
func (_m *ClientWithResponsesInterface) DeleteDbaasServiceGrafanaWithResponse(ctx context.Context, name string, reqEditors ...oapi.RequestEditorFn) (*oapi.DeleteDbaasServiceGrafanaResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.DeleteDbaasServiceGrafanaResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapi.RequestEditorFn) *oapi.DeleteDbaasServiceGrafanaResponse); ok {
		r0 = rf(ctx, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.DeleteDbaasServiceGrafanaResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDbaasServiceKafkaWithResponse provides a mock function with given fields: ctx, name, reqEditors
func (_m *ClientWithResponsesInterface) DeleteDbaasServiceKafkaWithResponse(ctx context.Context, name string, reqEditors ...oapi.RequestEditorFn) (*oapi.DeleteDbaasServiceKafkaResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.DeleteDbaasServiceKafkaResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapi.RequestEditorFn) *oapi.DeleteDbaasServiceKafkaResponse); ok {
		r0 = rf(ctx, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.DeleteDbaasServiceKafkaResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDbaasServiceMysqlWithResponse provides a mock function with given fields: ctx, name, reqEditors
func (_m *ClientWithResponsesInterface) DeleteDbaasServiceMysqlWithResponse(ctx context.Context, name string, reqEditors ...oapi.RequestEditorFn) (*oapi.DeleteDbaasServiceMysqlResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.DeleteDbaasServiceMysqlResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapi.RequestEditorFn) *oapi.DeleteDbaasServiceMysqlResponse); ok {
		r0 = rf(ctx, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.DeleteDbaasServiceMysqlResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDbaasServiceOpensearchWithResponse provides a mock function with given fields: ctx, name, reqEditors
func (_m *ClientWithResponsesInterface) DeleteDbaasServiceOpensearchWithResponse(ctx context.Context, name string, reqEditors ...oapi.RequestEditorFn) (*oapi.DeleteDbaasServiceOpensearchResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.DeleteDbaasServiceOpensearchResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapi.RequestEditorFn) *oapi.DeleteDbaasServiceOpensearchResponse); ok {
		r0 = rf(ctx, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.DeleteDbaasServiceOpensearchResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDbaasServicePgWithResponse provides a mock function with given fields: ctx, name, reqEditors
func (_m *ClientWithResponsesInterface) DeleteDbaasServicePgWithResponse(ctx context.Context, name string, reqEditors ...oapi.RequestEditorFn) (*oapi.DeleteDbaasServicePgResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.DeleteDbaasServicePgResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapi.RequestEditorFn) *oapi.DeleteDbaasServicePgResponse); ok {
		r0 = rf(ctx, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.DeleteDbaasServicePgResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDbaasServiceRedisWithResponse provides a mock function with given fields: ctx, name, reqEditors
func (_m *ClientWithResponsesInterface) DeleteDbaasServiceRedisWithResponse(ctx context.Context, name string, reqEditors ...oapi.RequestEditorFn) (*oapi.DeleteDbaasServiceRedisResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.DeleteDbaasServiceRedisResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapi.RequestEditorFn) *oapi.DeleteDbaasServiceRedisResponse); ok {
		r0 = rf(ctx, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.DeleteDbaasServiceRedisResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDbaasServiceWithResponse provides a mock function with given fields: ctx, name, reqEditors
func (_m *ClientWithResponsesInterface) DeleteDbaasServiceWithResponse(ctx context.Context, name string, reqEditors ...oapi.RequestEditorFn) (*oapi.DeleteDbaasServiceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.DeleteDbaasServiceResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapi.RequestEditorFn) *oapi.DeleteDbaasServiceResponse); ok {
		r0 = rf(ctx, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.DeleteDbaasServiceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDnsDomainRecordWithResponse provides a mock function with given fields: ctx, domainId, recordId, reqEditors
func (_m *ClientWithResponsesInterface) DeleteDnsDomainRecordWithResponse(ctx context.Context, domainId string, recordId string, reqEditors ...oapi.RequestEditorFn) (*oapi.DeleteDnsDomainRecordResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, domainId, recordId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.DeleteDnsDomainRecordResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...oapi.RequestEditorFn) *oapi.DeleteDnsDomainRecordResponse); ok {
		r0 = rf(ctx, domainId, recordId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.DeleteDnsDomainRecordResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, domainId, recordId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDnsDomainWithResponse provides a mock function with given fields: ctx, id, reqEditors
func (_m *ClientWithResponsesInterface) DeleteDnsDomainWithResponse(ctx context.Context, id string, reqEditors ...oapi.RequestEditorFn) (*oapi.DeleteDnsDomainResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.DeleteDnsDomainResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapi.RequestEditorFn) *oapi.DeleteDnsDomainResponse); ok {
		r0 = rf(ctx, id, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.DeleteDnsDomainResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteElasticIpWithResponse provides a mock function with given fields: ctx, id, reqEditors
func (_m *ClientWithResponsesInterface) DeleteElasticIpWithResponse(ctx context.Context, id string, reqEditors ...oapi.RequestEditorFn) (*oapi.DeleteElasticIpResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.DeleteElasticIpResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapi.RequestEditorFn) *oapi.DeleteElasticIpResponse); ok {
		r0 = rf(ctx, id, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.DeleteElasticIpResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteIamRoleWithResponse provides a mock function with given fields: ctx, id, reqEditors
func (_m *ClientWithResponsesInterface) DeleteIamRoleWithResponse(ctx context.Context, id string, reqEditors ...oapi.RequestEditorFn) (*oapi.DeleteIamRoleResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.DeleteIamRoleResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapi.RequestEditorFn) *oapi.DeleteIamRoleResponse); ok {
		r0 = rf(ctx, id, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.DeleteIamRoleResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteInstancePoolWithResponse provides a mock function with given fields: ctx, id, reqEditors
func (_m *ClientWithResponsesInterface) DeleteInstancePoolWithResponse(ctx context.Context, id string, reqEditors ...oapi.RequestEditorFn) (*oapi.DeleteInstancePoolResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.DeleteInstancePoolResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapi.RequestEditorFn) *oapi.DeleteInstancePoolResponse); ok {
		r0 = rf(ctx, id, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.DeleteInstancePoolResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteInstanceWithResponse provides a mock function with given fields: ctx, id, reqEditors
func (_m *ClientWithResponsesInterface) DeleteInstanceWithResponse(ctx context.Context, id string, reqEditors ...oapi.RequestEditorFn) (*oapi.DeleteInstanceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.DeleteInstanceResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapi.RequestEditorFn) *oapi.DeleteInstanceResponse); ok {
		r0 = rf(ctx, id, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.DeleteInstanceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLoadBalancerServiceWithResponse provides a mock function with given fields: ctx, id, serviceId, reqEditors
func (_m *ClientWithResponsesInterface) DeleteLoadBalancerServiceWithResponse(ctx context.Context, id string, serviceId string, reqEditors ...oapi.RequestEditorFn) (*oapi.DeleteLoadBalancerServiceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, serviceId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.DeleteLoadBalancerServiceResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...oapi.RequestEditorFn) *oapi.DeleteLoadBalancerServiceResponse); ok {
		r0 = rf(ctx, id, serviceId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.DeleteLoadBalancerServiceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, serviceId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLoadBalancerWithResponse provides a mock function with given fields: ctx, id, reqEditors
func (_m *ClientWithResponsesInterface) DeleteLoadBalancerWithResponse(ctx context.Context, id string, reqEditors ...oapi.RequestEditorFn) (*oapi.DeleteLoadBalancerResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.DeleteLoadBalancerResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapi.RequestEditorFn) *oapi.DeleteLoadBalancerResponse); ok {
		r0 = rf(ctx, id, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.DeleteLoadBalancerResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePrivateNetworkWithResponse provides a mock function with given fields: ctx, id, reqEditors
func (_m *ClientWithResponsesInterface) DeletePrivateNetworkWithResponse(ctx context.Context, id string, reqEditors ...oapi.RequestEditorFn) (*oapi.DeletePrivateNetworkResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.DeletePrivateNetworkResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapi.RequestEditorFn) *oapi.DeletePrivateNetworkResponse); ok {
		r0 = rf(ctx, id, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.DeletePrivateNetworkResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteReverseDnsElasticIpWithResponse provides a mock function with given fields: ctx, id, reqEditors
func (_m *ClientWithResponsesInterface) DeleteReverseDnsElasticIpWithResponse(ctx context.Context, id string, reqEditors ...oapi.RequestEditorFn) (*oapi.DeleteReverseDnsElasticIpResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.DeleteReverseDnsElasticIpResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapi.RequestEditorFn) *oapi.DeleteReverseDnsElasticIpResponse); ok {
		r0 = rf(ctx, id, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.DeleteReverseDnsElasticIpResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteReverseDnsInstanceWithResponse provides a mock function with given fields: ctx, id, reqEditors
func (_m *ClientWithResponsesInterface) DeleteReverseDnsInstanceWithResponse(ctx context.Context, id string, reqEditors ...oapi.RequestEditorFn) (*oapi.DeleteReverseDnsInstanceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.DeleteReverseDnsInstanceResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapi.RequestEditorFn) *oapi.DeleteReverseDnsInstanceResponse); ok {
		r0 = rf(ctx, id, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.DeleteReverseDnsInstanceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRuleFromSecurityGroupWithResponse provides a mock function with given fields: ctx, id, ruleId, reqEditors
func (_m *ClientWithResponsesInterface) DeleteRuleFromSecurityGroupWithResponse(ctx context.Context, id string, ruleId string, reqEditors ...oapi.RequestEditorFn) (*oapi.DeleteRuleFromSecurityGroupResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, ruleId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.DeleteRuleFromSecurityGroupResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...oapi.RequestEditorFn) *oapi.DeleteRuleFromSecurityGroupResponse); ok {
		r0 = rf(ctx, id, ruleId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.DeleteRuleFromSecurityGroupResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, ruleId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSecurityGroupWithResponse provides a mock function with given fields: ctx, id, reqEditors
func (_m *ClientWithResponsesInterface) DeleteSecurityGroupWithResponse(ctx context.Context, id string, reqEditors ...oapi.RequestEditorFn) (*oapi.DeleteSecurityGroupResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.DeleteSecurityGroupResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapi.RequestEditorFn) *oapi.DeleteSecurityGroupResponse); ok {
		r0 = rf(ctx, id, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.DeleteSecurityGroupResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSksClusterWithResponse provides a mock function with given fields: ctx, id, reqEditors
func (_m *ClientWithResponsesInterface) DeleteSksClusterWithResponse(ctx context.Context, id string, reqEditors ...oapi.RequestEditorFn) (*oapi.DeleteSksClusterResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.DeleteSksClusterResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapi.RequestEditorFn) *oapi.DeleteSksClusterResponse); ok {
		r0 = rf(ctx, id, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.DeleteSksClusterResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSksNodepoolWithResponse provides a mock function with given fields: ctx, id, sksNodepoolId, reqEditors
func (_m *ClientWithResponsesInterface) DeleteSksNodepoolWithResponse(ctx context.Context, id string, sksNodepoolId string, reqEditors ...oapi.RequestEditorFn) (*oapi.DeleteSksNodepoolResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, sksNodepoolId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.DeleteSksNodepoolResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...oapi.RequestEditorFn) *oapi.DeleteSksNodepoolResponse); ok {
		r0 = rf(ctx, id, sksNodepoolId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.DeleteSksNodepoolResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, sksNodepoolId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSnapshotWithResponse provides a mock function with given fields: ctx, id, reqEditors
func (_m *ClientWithResponsesInterface) DeleteSnapshotWithResponse(ctx context.Context, id string, reqEditors ...oapi.RequestEditorFn) (*oapi.DeleteSnapshotResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.DeleteSnapshotResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapi.RequestEditorFn) *oapi.DeleteSnapshotResponse); ok {
		r0 = rf(ctx, id, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.DeleteSnapshotResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSshKeyWithResponse provides a mock function with given fields: ctx, name, reqEditors
func (_m *ClientWithResponsesInterface) DeleteSshKeyWithResponse(ctx context.Context, name string, reqEditors ...oapi.RequestEditorFn) (*oapi.DeleteSshKeyResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.DeleteSshKeyResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapi.RequestEditorFn) *oapi.DeleteSshKeyResponse); ok {
		r0 = rf(ctx, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.DeleteSshKeyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTemplateWithResponse provides a mock function with given fields: ctx, id, reqEditors
func (_m *ClientWithResponsesInterface) DeleteTemplateWithResponse(ctx context.Context, id string, reqEditors ...oapi.RequestEditorFn) (*oapi.DeleteTemplateResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.DeleteTemplateResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapi.RequestEditorFn) *oapi.DeleteTemplateResponse); ok {
		r0 = rf(ctx, id, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.DeleteTemplateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetachInstanceFromElasticIpWithBodyWithResponse provides a mock function with given fields: ctx, id, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) DetachInstanceFromElasticIpWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.DetachInstanceFromElasticIpResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.DetachInstanceFromElasticIpResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) *oapi.DetachInstanceFromElasticIpResponse); ok {
		r0 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.DetachInstanceFromElasticIpResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetachInstanceFromElasticIpWithResponse provides a mock function with given fields: ctx, id, body, reqEditors
func (_m *ClientWithResponsesInterface) DetachInstanceFromElasticIpWithResponse(ctx context.Context, id string, body oapi.DetachInstanceFromElasticIpJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.DetachInstanceFromElasticIpResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.DetachInstanceFromElasticIpResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, oapi.DetachInstanceFromElasticIpJSONRequestBody, ...oapi.RequestEditorFn) *oapi.DetachInstanceFromElasticIpResponse); ok {
		r0 = rf(ctx, id, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.DetachInstanceFromElasticIpResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, oapi.DetachInstanceFromElasticIpJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetachInstanceFromPrivateNetworkWithBodyWithResponse provides a mock function with given fields: ctx, id, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) DetachInstanceFromPrivateNetworkWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.DetachInstanceFromPrivateNetworkResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.DetachInstanceFromPrivateNetworkResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) *oapi.DetachInstanceFromPrivateNetworkResponse); ok {
		r0 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.DetachInstanceFromPrivateNetworkResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetachInstanceFromPrivateNetworkWithResponse provides a mock function with given fields: ctx, id, body, reqEditors
func (_m *ClientWithResponsesInterface) DetachInstanceFromPrivateNetworkWithResponse(ctx context.Context, id string, body oapi.DetachInstanceFromPrivateNetworkJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.DetachInstanceFromPrivateNetworkResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.DetachInstanceFromPrivateNetworkResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, oapi.DetachInstanceFromPrivateNetworkJSONRequestBody, ...oapi.RequestEditorFn) *oapi.DetachInstanceFromPrivateNetworkResponse); ok {
		r0 = rf(ctx, id, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.DetachInstanceFromPrivateNetworkResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, oapi.DetachInstanceFromPrivateNetworkJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetachInstanceFromSecurityGroupWithBodyWithResponse provides a mock function with given fields: ctx, id, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) DetachInstanceFromSecurityGroupWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.DetachInstanceFromSecurityGroupResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.DetachInstanceFromSecurityGroupResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) *oapi.DetachInstanceFromSecurityGroupResponse); ok {
		r0 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.DetachInstanceFromSecurityGroupResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetachInstanceFromSecurityGroupWithResponse provides a mock function with given fields: ctx, id, body, reqEditors
func (_m *ClientWithResponsesInterface) DetachInstanceFromSecurityGroupWithResponse(ctx context.Context, id string, body oapi.DetachInstanceFromSecurityGroupJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.DetachInstanceFromSecurityGroupResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.DetachInstanceFromSecurityGroupResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, oapi.DetachInstanceFromSecurityGroupJSONRequestBody, ...oapi.RequestEditorFn) *oapi.DetachInstanceFromSecurityGroupResponse); ok {
		r0 = rf(ctx, id, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.DetachInstanceFromSecurityGroupResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, oapi.DetachInstanceFromSecurityGroupJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EvictInstancePoolMembersWithBodyWithResponse provides a mock function with given fields: ctx, id, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) EvictInstancePoolMembersWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.EvictInstancePoolMembersResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.EvictInstancePoolMembersResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) *oapi.EvictInstancePoolMembersResponse); ok {
		r0 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.EvictInstancePoolMembersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EvictInstancePoolMembersWithResponse provides a mock function with given fields: ctx, id, body, reqEditors
func (_m *ClientWithResponsesInterface) EvictInstancePoolMembersWithResponse(ctx context.Context, id string, body oapi.EvictInstancePoolMembersJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.EvictInstancePoolMembersResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.EvictInstancePoolMembersResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, oapi.EvictInstancePoolMembersJSONRequestBody, ...oapi.RequestEditorFn) *oapi.EvictInstancePoolMembersResponse); ok {
		r0 = rf(ctx, id, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.EvictInstancePoolMembersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, oapi.EvictInstancePoolMembersJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EvictSksNodepoolMembersWithBodyWithResponse provides a mock function with given fields: ctx, id, sksNodepoolId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) EvictSksNodepoolMembersWithBodyWithResponse(ctx context.Context, id string, sksNodepoolId string, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.EvictSksNodepoolMembersResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, sksNodepoolId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.EvictSksNodepoolMembersResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...oapi.RequestEditorFn) *oapi.EvictSksNodepoolMembersResponse); ok {
		r0 = rf(ctx, id, sksNodepoolId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.EvictSksNodepoolMembersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, sksNodepoolId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EvictSksNodepoolMembersWithResponse provides a mock function with given fields: ctx, id, sksNodepoolId, body, reqEditors
func (_m *ClientWithResponsesInterface) EvictSksNodepoolMembersWithResponse(ctx context.Context, id string, sksNodepoolId string, body oapi.EvictSksNodepoolMembersJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.EvictSksNodepoolMembersResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, sksNodepoolId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.EvictSksNodepoolMembersResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, oapi.EvictSksNodepoolMembersJSONRequestBody, ...oapi.RequestEditorFn) *oapi.EvictSksNodepoolMembersResponse); ok {
		r0 = rf(ctx, id, sksNodepoolId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.EvictSksNodepoolMembersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, oapi.EvictSksNodepoolMembersJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, sksNodepoolId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExportSnapshotWithResponse provides a mock function with given fields: ctx, id, reqEditors
func (_m *ClientWithResponsesInterface) ExportSnapshotWithResponse(ctx context.Context, id string, reqEditors ...oapi.RequestEditorFn) (*oapi.ExportSnapshotResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.ExportSnapshotResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapi.RequestEditorFn) *oapi.ExportSnapshotResponse); ok {
		r0 = rf(ctx, id, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.ExportSnapshotResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateSksClusterKubeconfigWithBodyWithResponse provides a mock function with given fields: ctx, id, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) GenerateSksClusterKubeconfigWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.GenerateSksClusterKubeconfigResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.GenerateSksClusterKubeconfigResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) *oapi.GenerateSksClusterKubeconfigResponse); ok {
		r0 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.GenerateSksClusterKubeconfigResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateSksClusterKubeconfigWithResponse provides a mock function with given fields: ctx, id, body, reqEditors
func (_m *ClientWithResponsesInterface) GenerateSksClusterKubeconfigWithResponse(ctx context.Context, id string, body oapi.GenerateSksClusterKubeconfigJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.GenerateSksClusterKubeconfigResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.GenerateSksClusterKubeconfigResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, oapi.GenerateSksClusterKubeconfigJSONRequestBody, ...oapi.RequestEditorFn) *oapi.GenerateSksClusterKubeconfigResponse); ok {
		r0 = rf(ctx, id, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.GenerateSksClusterKubeconfigResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, oapi.GenerateSksClusterKubeconfigJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccessKeyWithResponse provides a mock function with given fields: ctx, key, reqEditors
func (_m *ClientWithResponsesInterface) GetAccessKeyWithResponse(ctx context.Context, key string, reqEditors ...oapi.RequestEditorFn) (*oapi.GetAccessKeyResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.GetAccessKeyResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapi.RequestEditorFn) *oapi.GetAccessKeyResponse); ok {
		r0 = rf(ctx, key, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.GetAccessKeyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, key, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAntiAffinityGroupWithResponse provides a mock function with given fields: ctx, id, reqEditors
func (_m *ClientWithResponsesInterface) GetAntiAffinityGroupWithResponse(ctx context.Context, id string, reqEditors ...oapi.RequestEditorFn) (*oapi.GetAntiAffinityGroupResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.GetAntiAffinityGroupResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapi.RequestEditorFn) *oapi.GetAntiAffinityGroupResponse); ok {
		r0 = rf(ctx, id, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.GetAntiAffinityGroupResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApiKeyWithResponse provides a mock function with given fields: ctx, id, reqEditors
func (_m *ClientWithResponsesInterface) GetApiKeyWithResponse(ctx context.Context, id string, reqEditors ...oapi.RequestEditorFn) (*oapi.GetApiKeyResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.GetApiKeyResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapi.RequestEditorFn) *oapi.GetApiKeyResponse); ok {
		r0 = rf(ctx, id, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.GetApiKeyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDbaasCaCertificateWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *ClientWithResponsesInterface) GetDbaasCaCertificateWithResponse(ctx context.Context, reqEditors ...oapi.RequestEditorFn) (*oapi.GetDbaasCaCertificateResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.GetDbaasCaCertificateResponse
	if rf, ok := ret.Get(0).(func(context.Context, ...oapi.RequestEditorFn) *oapi.GetDbaasCaCertificateResponse); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.GetDbaasCaCertificateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDbaasIntegrationWithResponse provides a mock function with given fields: ctx, id, reqEditors
func (_m *ClientWithResponsesInterface) GetDbaasIntegrationWithResponse(ctx context.Context, id string, reqEditors ...oapi.RequestEditorFn) (*oapi.GetDbaasIntegrationResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.GetDbaasIntegrationResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapi.RequestEditorFn) *oapi.GetDbaasIntegrationResponse); ok {
		r0 = rf(ctx, id, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.GetDbaasIntegrationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDbaasKafkaAclConfigWithResponse provides a mock function with given fields: ctx, name, reqEditors
func (_m *ClientWithResponsesInterface) GetDbaasKafkaAclConfigWithResponse(ctx context.Context, name oapi.DbaasServiceName, reqEditors ...oapi.RequestEditorFn) (*oapi.GetDbaasKafkaAclConfigResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.GetDbaasKafkaAclConfigResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, ...oapi.RequestEditorFn) *oapi.GetDbaasKafkaAclConfigResponse); ok {
		r0 = rf(ctx, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.GetDbaasKafkaAclConfigResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDbaasMigrationStatusWithResponse provides a mock function with given fields: ctx, name, reqEditors
func (_m *ClientWithResponsesInterface) GetDbaasMigrationStatusWithResponse(ctx context.Context, name oapi.DbaasServiceName, reqEditors ...oapi.RequestEditorFn) (*oapi.GetDbaasMigrationStatusResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.GetDbaasMigrationStatusResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, ...oapi.RequestEditorFn) *oapi.GetDbaasMigrationStatusResponse); ok {
		r0 = rf(ctx, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.GetDbaasMigrationStatusResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDbaasOpensearchAclConfigWithResponse provides a mock function with given fields: ctx, name, reqEditors
func (_m *ClientWithResponsesInterface) GetDbaasOpensearchAclConfigWithResponse(ctx context.Context, name oapi.DbaasServiceName, reqEditors ...oapi.RequestEditorFn) (*oapi.GetDbaasOpensearchAclConfigResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.GetDbaasOpensearchAclConfigResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, ...oapi.RequestEditorFn) *oapi.GetDbaasOpensearchAclConfigResponse); ok {
		r0 = rf(ctx, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.GetDbaasOpensearchAclConfigResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDbaasServiceGrafanaWithResponse provides a mock function with given fields: ctx, name, reqEditors
func (_m *ClientWithResponsesInterface) GetDbaasServiceGrafanaWithResponse(ctx context.Context, name oapi.DbaasServiceName, reqEditors ...oapi.RequestEditorFn) (*oapi.GetDbaasServiceGrafanaResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.GetDbaasServiceGrafanaResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, ...oapi.RequestEditorFn) *oapi.GetDbaasServiceGrafanaResponse); ok {
		r0 = rf(ctx, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.GetDbaasServiceGrafanaResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDbaasServiceKafkaWithResponse provides a mock function with given fields: ctx, name, reqEditors
func (_m *ClientWithResponsesInterface) GetDbaasServiceKafkaWithResponse(ctx context.Context, name oapi.DbaasServiceName, reqEditors ...oapi.RequestEditorFn) (*oapi.GetDbaasServiceKafkaResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.GetDbaasServiceKafkaResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, ...oapi.RequestEditorFn) *oapi.GetDbaasServiceKafkaResponse); ok {
		r0 = rf(ctx, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.GetDbaasServiceKafkaResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDbaasServiceLogsWithBodyWithResponse provides a mock function with given fields: ctx, serviceName, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) GetDbaasServiceLogsWithBodyWithResponse(ctx context.Context, serviceName string, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.GetDbaasServiceLogsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, serviceName, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.GetDbaasServiceLogsResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) *oapi.GetDbaasServiceLogsResponse); ok {
		r0 = rf(ctx, serviceName, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.GetDbaasServiceLogsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, serviceName, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDbaasServiceLogsWithResponse provides a mock function with given fields: ctx, serviceName, body, reqEditors
func (_m *ClientWithResponsesInterface) GetDbaasServiceLogsWithResponse(ctx context.Context, serviceName string, body oapi.GetDbaasServiceLogsJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.GetDbaasServiceLogsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, serviceName, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.GetDbaasServiceLogsResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, oapi.GetDbaasServiceLogsJSONRequestBody, ...oapi.RequestEditorFn) *oapi.GetDbaasServiceLogsResponse); ok {
		r0 = rf(ctx, serviceName, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.GetDbaasServiceLogsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, oapi.GetDbaasServiceLogsJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, serviceName, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDbaasServiceMetricsWithBodyWithResponse provides a mock function with given fields: ctx, serviceName, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) GetDbaasServiceMetricsWithBodyWithResponse(ctx context.Context, serviceName string, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.GetDbaasServiceMetricsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, serviceName, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.GetDbaasServiceMetricsResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) *oapi.GetDbaasServiceMetricsResponse); ok {
		r0 = rf(ctx, serviceName, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.GetDbaasServiceMetricsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, serviceName, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDbaasServiceMetricsWithResponse provides a mock function with given fields: ctx, serviceName, body, reqEditors
func (_m *ClientWithResponsesInterface) GetDbaasServiceMetricsWithResponse(ctx context.Context, serviceName string, body oapi.GetDbaasServiceMetricsJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.GetDbaasServiceMetricsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, serviceName, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.GetDbaasServiceMetricsResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, oapi.GetDbaasServiceMetricsJSONRequestBody, ...oapi.RequestEditorFn) *oapi.GetDbaasServiceMetricsResponse); ok {
		r0 = rf(ctx, serviceName, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.GetDbaasServiceMetricsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, oapi.GetDbaasServiceMetricsJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, serviceName, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDbaasServiceMysqlWithResponse provides a mock function with given fields: ctx, name, reqEditors
func (_m *ClientWithResponsesInterface) GetDbaasServiceMysqlWithResponse(ctx context.Context, name oapi.DbaasServiceName, reqEditors ...oapi.RequestEditorFn) (*oapi.GetDbaasServiceMysqlResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.GetDbaasServiceMysqlResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, ...oapi.RequestEditorFn) *oapi.GetDbaasServiceMysqlResponse); ok {
		r0 = rf(ctx, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.GetDbaasServiceMysqlResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDbaasServiceOpensearchWithResponse provides a mock function with given fields: ctx, name, reqEditors
func (_m *ClientWithResponsesInterface) GetDbaasServiceOpensearchWithResponse(ctx context.Context, name oapi.DbaasServiceName, reqEditors ...oapi.RequestEditorFn) (*oapi.GetDbaasServiceOpensearchResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.GetDbaasServiceOpensearchResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, ...oapi.RequestEditorFn) *oapi.GetDbaasServiceOpensearchResponse); ok {
		r0 = rf(ctx, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.GetDbaasServiceOpensearchResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDbaasServicePgWithResponse provides a mock function with given fields: ctx, name, reqEditors
func (_m *ClientWithResponsesInterface) GetDbaasServicePgWithResponse(ctx context.Context, name oapi.DbaasServiceName, reqEditors ...oapi.RequestEditorFn) (*oapi.GetDbaasServicePgResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.GetDbaasServicePgResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, ...oapi.RequestEditorFn) *oapi.GetDbaasServicePgResponse); ok {
		r0 = rf(ctx, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.GetDbaasServicePgResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDbaasServiceRedisWithResponse provides a mock function with given fields: ctx, name, reqEditors
func (_m *ClientWithResponsesInterface) GetDbaasServiceRedisWithResponse(ctx context.Context, name oapi.DbaasServiceName, reqEditors ...oapi.RequestEditorFn) (*oapi.GetDbaasServiceRedisResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.GetDbaasServiceRedisResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, ...oapi.RequestEditorFn) *oapi.GetDbaasServiceRedisResponse); ok {
		r0 = rf(ctx, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.GetDbaasServiceRedisResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDbaasServiceTypeWithResponse provides a mock function with given fields: ctx, serviceTypeName, reqEditors
func (_m *ClientWithResponsesInterface) GetDbaasServiceTypeWithResponse(ctx context.Context, serviceTypeName string, reqEditors ...oapi.RequestEditorFn) (*oapi.GetDbaasServiceTypeResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, serviceTypeName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.GetDbaasServiceTypeResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapi.RequestEditorFn) *oapi.GetDbaasServiceTypeResponse); ok {
		r0 = rf(ctx, serviceTypeName, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.GetDbaasServiceTypeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, serviceTypeName, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDbaasSettingsGrafanaWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *ClientWithResponsesInterface) GetDbaasSettingsGrafanaWithResponse(ctx context.Context, reqEditors ...oapi.RequestEditorFn) (*oapi.GetDbaasSettingsGrafanaResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.GetDbaasSettingsGrafanaResponse
	if rf, ok := ret.Get(0).(func(context.Context, ...oapi.RequestEditorFn) *oapi.GetDbaasSettingsGrafanaResponse); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.GetDbaasSettingsGrafanaResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDbaasSettingsKafkaWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *ClientWithResponsesInterface) GetDbaasSettingsKafkaWithResponse(ctx context.Context, reqEditors ...oapi.RequestEditorFn) (*oapi.GetDbaasSettingsKafkaResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.GetDbaasSettingsKafkaResponse
	if rf, ok := ret.Get(0).(func(context.Context, ...oapi.RequestEditorFn) *oapi.GetDbaasSettingsKafkaResponse); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.GetDbaasSettingsKafkaResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDbaasSettingsMysqlWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *ClientWithResponsesInterface) GetDbaasSettingsMysqlWithResponse(ctx context.Context, reqEditors ...oapi.RequestEditorFn) (*oapi.GetDbaasSettingsMysqlResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.GetDbaasSettingsMysqlResponse
	if rf, ok := ret.Get(0).(func(context.Context, ...oapi.RequestEditorFn) *oapi.GetDbaasSettingsMysqlResponse); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.GetDbaasSettingsMysqlResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDbaasSettingsOpensearchWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *ClientWithResponsesInterface) GetDbaasSettingsOpensearchWithResponse(ctx context.Context, reqEditors ...oapi.RequestEditorFn) (*oapi.GetDbaasSettingsOpensearchResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.GetDbaasSettingsOpensearchResponse
	if rf, ok := ret.Get(0).(func(context.Context, ...oapi.RequestEditorFn) *oapi.GetDbaasSettingsOpensearchResponse); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.GetDbaasSettingsOpensearchResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDbaasSettingsPgWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *ClientWithResponsesInterface) GetDbaasSettingsPgWithResponse(ctx context.Context, reqEditors ...oapi.RequestEditorFn) (*oapi.GetDbaasSettingsPgResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.GetDbaasSettingsPgResponse
	if rf, ok := ret.Get(0).(func(context.Context, ...oapi.RequestEditorFn) *oapi.GetDbaasSettingsPgResponse); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.GetDbaasSettingsPgResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDbaasSettingsRedisWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *ClientWithResponsesInterface) GetDbaasSettingsRedisWithResponse(ctx context.Context, reqEditors ...oapi.RequestEditorFn) (*oapi.GetDbaasSettingsRedisResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.GetDbaasSettingsRedisResponse
	if rf, ok := ret.Get(0).(func(context.Context, ...oapi.RequestEditorFn) *oapi.GetDbaasSettingsRedisResponse); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.GetDbaasSettingsRedisResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDbaasTaskWithResponse provides a mock function with given fields: ctx, service, id, reqEditors
func (_m *ClientWithResponsesInterface) GetDbaasTaskWithResponse(ctx context.Context, service oapi.DbaasServiceName, id string, reqEditors ...oapi.RequestEditorFn) (*oapi.GetDbaasTaskResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, service, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.GetDbaasTaskResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, string, ...oapi.RequestEditorFn) *oapi.GetDbaasTaskResponse); ok {
		r0 = rf(ctx, service, id, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.GetDbaasTaskResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, service, id, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeployTargetWithResponse provides a mock function with given fields: ctx, id, reqEditors
func (_m *ClientWithResponsesInterface) GetDeployTargetWithResponse(ctx context.Context, id string, reqEditors ...oapi.RequestEditorFn) (*oapi.GetDeployTargetResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.GetDeployTargetResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapi.RequestEditorFn) *oapi.GetDeployTargetResponse); ok {
		r0 = rf(ctx, id, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.GetDeployTargetResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDnsDomainRecordWithResponse provides a mock function with given fields: ctx, domainId, recordId, reqEditors
func (_m *ClientWithResponsesInterface) GetDnsDomainRecordWithResponse(ctx context.Context, domainId string, recordId string, reqEditors ...oapi.RequestEditorFn) (*oapi.GetDnsDomainRecordResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, domainId, recordId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.GetDnsDomainRecordResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...oapi.RequestEditorFn) *oapi.GetDnsDomainRecordResponse); ok {
		r0 = rf(ctx, domainId, recordId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.GetDnsDomainRecordResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, domainId, recordId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDnsDomainWithResponse provides a mock function with given fields: ctx, id, reqEditors
func (_m *ClientWithResponsesInterface) GetDnsDomainWithResponse(ctx context.Context, id string, reqEditors ...oapi.RequestEditorFn) (*oapi.GetDnsDomainResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.GetDnsDomainResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapi.RequestEditorFn) *oapi.GetDnsDomainResponse); ok {
		r0 = rf(ctx, id, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.GetDnsDomainResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDnsDomainZoneFileWithResponse provides a mock function with given fields: ctx, id, reqEditors
func (_m *ClientWithResponsesInterface) GetDnsDomainZoneFileWithResponse(ctx context.Context, id string, reqEditors ...oapi.RequestEditorFn) (*oapi.GetDnsDomainZoneFileResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.GetDnsDomainZoneFileResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapi.RequestEditorFn) *oapi.GetDnsDomainZoneFileResponse); ok {
		r0 = rf(ctx, id, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.GetDnsDomainZoneFileResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetElasticIpWithResponse provides a mock function with given fields: ctx, id, reqEditors
func (_m *ClientWithResponsesInterface) GetElasticIpWithResponse(ctx context.Context, id string, reqEditors ...oapi.RequestEditorFn) (*oapi.GetElasticIpResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.GetElasticIpResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapi.RequestEditorFn) *oapi.GetElasticIpResponse); ok {
		r0 = rf(ctx, id, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.GetElasticIpResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIamOrganizationPolicyWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *ClientWithResponsesInterface) GetIamOrganizationPolicyWithResponse(ctx context.Context, reqEditors ...oapi.RequestEditorFn) (*oapi.GetIamOrganizationPolicyResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.GetIamOrganizationPolicyResponse
	if rf, ok := ret.Get(0).(func(context.Context, ...oapi.RequestEditorFn) *oapi.GetIamOrganizationPolicyResponse); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.GetIamOrganizationPolicyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIamRoleWithResponse provides a mock function with given fields: ctx, id, reqEditors
func (_m *ClientWithResponsesInterface) GetIamRoleWithResponse(ctx context.Context, id string, reqEditors ...oapi.RequestEditorFn) (*oapi.GetIamRoleResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.GetIamRoleResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapi.RequestEditorFn) *oapi.GetIamRoleResponse); ok {
		r0 = rf(ctx, id, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.GetIamRoleResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstancePoolWithResponse provides a mock function with given fields: ctx, id, reqEditors
func (_m *ClientWithResponsesInterface) GetInstancePoolWithResponse(ctx context.Context, id string, reqEditors ...oapi.RequestEditorFn) (*oapi.GetInstancePoolResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.GetInstancePoolResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapi.RequestEditorFn) *oapi.GetInstancePoolResponse); ok {
		r0 = rf(ctx, id, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.GetInstancePoolResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstanceTypeWithResponse provides a mock function with given fields: ctx, id, reqEditors
func (_m *ClientWithResponsesInterface) GetInstanceTypeWithResponse(ctx context.Context, id string, reqEditors ...oapi.RequestEditorFn) (*oapi.GetInstanceTypeResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.GetInstanceTypeResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapi.RequestEditorFn) *oapi.GetInstanceTypeResponse); ok {
		r0 = rf(ctx, id, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.GetInstanceTypeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstanceWithResponse provides a mock function with given fields: ctx, id, reqEditors
func (_m *ClientWithResponsesInterface) GetInstanceWithResponse(ctx context.Context, id string, reqEditors ...oapi.RequestEditorFn) (*oapi.GetInstanceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.GetInstanceResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapi.RequestEditorFn) *oapi.GetInstanceResponse); ok {
		r0 = rf(ctx, id, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.GetInstanceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLoadBalancerServiceWithResponse provides a mock function with given fields: ctx, id, serviceId, reqEditors
func (_m *ClientWithResponsesInterface) GetLoadBalancerServiceWithResponse(ctx context.Context, id string, serviceId string, reqEditors ...oapi.RequestEditorFn) (*oapi.GetLoadBalancerServiceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, serviceId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.GetLoadBalancerServiceResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...oapi.RequestEditorFn) *oapi.GetLoadBalancerServiceResponse); ok {
		r0 = rf(ctx, id, serviceId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.GetLoadBalancerServiceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, serviceId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLoadBalancerWithResponse provides a mock function with given fields: ctx, id, reqEditors
func (_m *ClientWithResponsesInterface) GetLoadBalancerWithResponse(ctx context.Context, id string, reqEditors ...oapi.RequestEditorFn) (*oapi.GetLoadBalancerResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.GetLoadBalancerResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapi.RequestEditorFn) *oapi.GetLoadBalancerResponse); ok {
		r0 = rf(ctx, id, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.GetLoadBalancerResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOperationWithResponse provides a mock function with given fields: ctx, id, reqEditors
func (_m *ClientWithResponsesInterface) GetOperationWithResponse(ctx context.Context, id string, reqEditors ...oapi.RequestEditorFn) (*oapi.GetOperationResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.GetOperationResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapi.RequestEditorFn) *oapi.GetOperationResponse); ok {
		r0 = rf(ctx, id, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.GetOperationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPrivateNetworkWithResponse provides a mock function with given fields: ctx, id, reqEditors
func (_m *ClientWithResponsesInterface) GetPrivateNetworkWithResponse(ctx context.Context, id string, reqEditors ...oapi.RequestEditorFn) (*oapi.GetPrivateNetworkResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.GetPrivateNetworkResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapi.RequestEditorFn) *oapi.GetPrivateNetworkResponse); ok {
		r0 = rf(ctx, id, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.GetPrivateNetworkResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQuotaWithResponse provides a mock function with given fields: ctx, entity, reqEditors
func (_m *ClientWithResponsesInterface) GetQuotaWithResponse(ctx context.Context, entity string, reqEditors ...oapi.RequestEditorFn) (*oapi.GetQuotaResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, entity)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.GetQuotaResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapi.RequestEditorFn) *oapi.GetQuotaResponse); ok {
		r0 = rf(ctx, entity, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.GetQuotaResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, entity, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReverseDnsElasticIpWithResponse provides a mock function with given fields: ctx, id, reqEditors
func (_m *ClientWithResponsesInterface) GetReverseDnsElasticIpWithResponse(ctx context.Context, id string, reqEditors ...oapi.RequestEditorFn) (*oapi.GetReverseDnsElasticIpResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.GetReverseDnsElasticIpResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapi.RequestEditorFn) *oapi.GetReverseDnsElasticIpResponse); ok {
		r0 = rf(ctx, id, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.GetReverseDnsElasticIpResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReverseDnsInstanceWithResponse provides a mock function with given fields: ctx, id, reqEditors
func (_m *ClientWithResponsesInterface) GetReverseDnsInstanceWithResponse(ctx context.Context, id string, reqEditors ...oapi.RequestEditorFn) (*oapi.GetReverseDnsInstanceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.GetReverseDnsInstanceResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapi.RequestEditorFn) *oapi.GetReverseDnsInstanceResponse); ok {
		r0 = rf(ctx, id, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.GetReverseDnsInstanceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSecurityGroupWithResponse provides a mock function with given fields: ctx, id, reqEditors
func (_m *ClientWithResponsesInterface) GetSecurityGroupWithResponse(ctx context.Context, id string, reqEditors ...oapi.RequestEditorFn) (*oapi.GetSecurityGroupResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.GetSecurityGroupResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapi.RequestEditorFn) *oapi.GetSecurityGroupResponse); ok {
		r0 = rf(ctx, id, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.GetSecurityGroupResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSksClusterAuthorityCertWithResponse provides a mock function with given fields: ctx, id, authority, reqEditors
func (_m *ClientWithResponsesInterface) GetSksClusterAuthorityCertWithResponse(ctx context.Context, id string, authority oapi.GetSksClusterAuthorityCertParamsAuthority, reqEditors ...oapi.RequestEditorFn) (*oapi.GetSksClusterAuthorityCertResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, authority)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.GetSksClusterAuthorityCertResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, oapi.GetSksClusterAuthorityCertParamsAuthority, ...oapi.RequestEditorFn) *oapi.GetSksClusterAuthorityCertResponse); ok {
		r0 = rf(ctx, id, authority, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.GetSksClusterAuthorityCertResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, oapi.GetSksClusterAuthorityCertParamsAuthority, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, authority, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSksClusterWithResponse provides a mock function with given fields: ctx, id, reqEditors
func (_m *ClientWithResponsesInterface) GetSksClusterWithResponse(ctx context.Context, id string, reqEditors ...oapi.RequestEditorFn) (*oapi.GetSksClusterResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.GetSksClusterResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapi.RequestEditorFn) *oapi.GetSksClusterResponse); ok {
		r0 = rf(ctx, id, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.GetSksClusterResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSksNodepoolWithResponse provides a mock function with given fields: ctx, id, sksNodepoolId, reqEditors
func (_m *ClientWithResponsesInterface) GetSksNodepoolWithResponse(ctx context.Context, id string, sksNodepoolId string, reqEditors ...oapi.RequestEditorFn) (*oapi.GetSksNodepoolResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, sksNodepoolId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.GetSksNodepoolResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...oapi.RequestEditorFn) *oapi.GetSksNodepoolResponse); ok {
		r0 = rf(ctx, id, sksNodepoolId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.GetSksNodepoolResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, sksNodepoolId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSnapshotWithResponse provides a mock function with given fields: ctx, id, reqEditors
func (_m *ClientWithResponsesInterface) GetSnapshotWithResponse(ctx context.Context, id string, reqEditors ...oapi.RequestEditorFn) (*oapi.GetSnapshotResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.GetSnapshotResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapi.RequestEditorFn) *oapi.GetSnapshotResponse); ok {
		r0 = rf(ctx, id, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.GetSnapshotResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSosPresignedUrlWithResponse provides a mock function with given fields: ctx, bucket, params, reqEditors
func (_m *ClientWithResponsesInterface) GetSosPresignedUrlWithResponse(ctx context.Context, bucket string, params *oapi.GetSosPresignedUrlParams, reqEditors ...oapi.RequestEditorFn) (*oapi.GetSosPresignedUrlResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, bucket, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.GetSosPresignedUrlResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *oapi.GetSosPresignedUrlParams, ...oapi.RequestEditorFn) *oapi.GetSosPresignedUrlResponse); ok {
		r0 = rf(ctx, bucket, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.GetSosPresignedUrlResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *oapi.GetSosPresignedUrlParams, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, bucket, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSshKeyWithResponse provides a mock function with given fields: ctx, name, reqEditors
func (_m *ClientWithResponsesInterface) GetSshKeyWithResponse(ctx context.Context, name string, reqEditors ...oapi.RequestEditorFn) (*oapi.GetSshKeyResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.GetSshKeyResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapi.RequestEditorFn) *oapi.GetSshKeyResponse); ok {
		r0 = rf(ctx, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.GetSshKeyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTemplateWithResponse provides a mock function with given fields: ctx, id, reqEditors
func (_m *ClientWithResponsesInterface) GetTemplateWithResponse(ctx context.Context, id string, reqEditors ...oapi.RequestEditorFn) (*oapi.GetTemplateResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.GetTemplateResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapi.RequestEditorFn) *oapi.GetTemplateResponse); ok {
		r0 = rf(ctx, id, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.GetTemplateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAccessKeyKnownOperationsWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *ClientWithResponsesInterface) ListAccessKeyKnownOperationsWithResponse(ctx context.Context, reqEditors ...oapi.RequestEditorFn) (*oapi.ListAccessKeyKnownOperationsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.ListAccessKeyKnownOperationsResponse
	if rf, ok := ret.Get(0).(func(context.Context, ...oapi.RequestEditorFn) *oapi.ListAccessKeyKnownOperationsResponse); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.ListAccessKeyKnownOperationsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAccessKeyOperationsWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *ClientWithResponsesInterface) ListAccessKeyOperationsWithResponse(ctx context.Context, reqEditors ...oapi.RequestEditorFn) (*oapi.ListAccessKeyOperationsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.ListAccessKeyOperationsResponse
	if rf, ok := ret.Get(0).(func(context.Context, ...oapi.RequestEditorFn) *oapi.ListAccessKeyOperationsResponse); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.ListAccessKeyOperationsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAccessKeysWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *ClientWithResponsesInterface) ListAccessKeysWithResponse(ctx context.Context, reqEditors ...oapi.RequestEditorFn) (*oapi.ListAccessKeysResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.ListAccessKeysResponse
	if rf, ok := ret.Get(0).(func(context.Context, ...oapi.RequestEditorFn) *oapi.ListAccessKeysResponse); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.ListAccessKeysResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAntiAffinityGroupsWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *ClientWithResponsesInterface) ListAntiAffinityGroupsWithResponse(ctx context.Context, reqEditors ...oapi.RequestEditorFn) (*oapi.ListAntiAffinityGroupsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.ListAntiAffinityGroupsResponse
	if rf, ok := ret.Get(0).(func(context.Context, ...oapi.RequestEditorFn) *oapi.ListAntiAffinityGroupsResponse); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.ListAntiAffinityGroupsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListApiKeysWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *ClientWithResponsesInterface) ListApiKeysWithResponse(ctx context.Context, reqEditors ...oapi.RequestEditorFn) (*oapi.ListApiKeysResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.ListApiKeysResponse
	if rf, ok := ret.Get(0).(func(context.Context, ...oapi.RequestEditorFn) *oapi.ListApiKeysResponse); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.ListApiKeysResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDbaasIntegrationSettingsWithResponse provides a mock function with given fields: ctx, integrationType, sourceType, destType, reqEditors
func (_m *ClientWithResponsesInterface) ListDbaasIntegrationSettingsWithResponse(ctx context.Context, integrationType string, sourceType string, destType string, reqEditors ...oapi.RequestEditorFn) (*oapi.ListDbaasIntegrationSettingsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, integrationType, sourceType, destType)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.ListDbaasIntegrationSettingsResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, ...oapi.RequestEditorFn) *oapi.ListDbaasIntegrationSettingsResponse); ok {
		r0 = rf(ctx, integrationType, sourceType, destType, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.ListDbaasIntegrationSettingsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, integrationType, sourceType, destType, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDbaasIntegrationTypesWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *ClientWithResponsesInterface) ListDbaasIntegrationTypesWithResponse(ctx context.Context, reqEditors ...oapi.RequestEditorFn) (*oapi.ListDbaasIntegrationTypesResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.ListDbaasIntegrationTypesResponse
	if rf, ok := ret.Get(0).(func(context.Context, ...oapi.RequestEditorFn) *oapi.ListDbaasIntegrationTypesResponse); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.ListDbaasIntegrationTypesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDbaasServiceTypesWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *ClientWithResponsesInterface) ListDbaasServiceTypesWithResponse(ctx context.Context, reqEditors ...oapi.RequestEditorFn) (*oapi.ListDbaasServiceTypesResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.ListDbaasServiceTypesResponse
	if rf, ok := ret.Get(0).(func(context.Context, ...oapi.RequestEditorFn) *oapi.ListDbaasServiceTypesResponse); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.ListDbaasServiceTypesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDbaasServicesWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *ClientWithResponsesInterface) ListDbaasServicesWithResponse(ctx context.Context, reqEditors ...oapi.RequestEditorFn) (*oapi.ListDbaasServicesResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.ListDbaasServicesResponse
	if rf, ok := ret.Get(0).(func(context.Context, ...oapi.RequestEditorFn) *oapi.ListDbaasServicesResponse); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.ListDbaasServicesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDeployTargetsWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *ClientWithResponsesInterface) ListDeployTargetsWithResponse(ctx context.Context, reqEditors ...oapi.RequestEditorFn) (*oapi.ListDeployTargetsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.ListDeployTargetsResponse
	if rf, ok := ret.Get(0).(func(context.Context, ...oapi.RequestEditorFn) *oapi.ListDeployTargetsResponse); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.ListDeployTargetsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDnsDomainRecordsWithResponse provides a mock function with given fields: ctx, domainId, reqEditors
func (_m *ClientWithResponsesInterface) ListDnsDomainRecordsWithResponse(ctx context.Context, domainId string, reqEditors ...oapi.RequestEditorFn) (*oapi.ListDnsDomainRecordsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, domainId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.ListDnsDomainRecordsResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapi.RequestEditorFn) *oapi.ListDnsDomainRecordsResponse); ok {
		r0 = rf(ctx, domainId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.ListDnsDomainRecordsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, domainId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDnsDomainsWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *ClientWithResponsesInterface) ListDnsDomainsWithResponse(ctx context.Context, reqEditors ...oapi.RequestEditorFn) (*oapi.ListDnsDomainsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.ListDnsDomainsResponse
	if rf, ok := ret.Get(0).(func(context.Context, ...oapi.RequestEditorFn) *oapi.ListDnsDomainsResponse); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.ListDnsDomainsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListElasticIpsWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *ClientWithResponsesInterface) ListElasticIpsWithResponse(ctx context.Context, reqEditors ...oapi.RequestEditorFn) (*oapi.ListElasticIpsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.ListElasticIpsResponse
	if rf, ok := ret.Get(0).(func(context.Context, ...oapi.RequestEditorFn) *oapi.ListElasticIpsResponse); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.ListElasticIpsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEventsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *ClientWithResponsesInterface) ListEventsWithResponse(ctx context.Context, params *oapi.ListEventsParams, reqEditors ...oapi.RequestEditorFn) (*oapi.ListEventsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.ListEventsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *oapi.ListEventsParams, ...oapi.RequestEditorFn) *oapi.ListEventsResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.ListEventsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *oapi.ListEventsParams, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListIamRolesWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *ClientWithResponsesInterface) ListIamRolesWithResponse(ctx context.Context, reqEditors ...oapi.RequestEditorFn) (*oapi.ListIamRolesResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.ListIamRolesResponse
	if rf, ok := ret.Get(0).(func(context.Context, ...oapi.RequestEditorFn) *oapi.ListIamRolesResponse); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.ListIamRolesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListInstancePoolsWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *ClientWithResponsesInterface) ListInstancePoolsWithResponse(ctx context.Context, reqEditors ...oapi.RequestEditorFn) (*oapi.ListInstancePoolsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.ListInstancePoolsResponse
	if rf, ok := ret.Get(0).(func(context.Context, ...oapi.RequestEditorFn) *oapi.ListInstancePoolsResponse); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.ListInstancePoolsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListInstanceTypesWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *ClientWithResponsesInterface) ListInstanceTypesWithResponse(ctx context.Context, reqEditors ...oapi.RequestEditorFn) (*oapi.ListInstanceTypesResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.ListInstanceTypesResponse
	if rf, ok := ret.Get(0).(func(context.Context, ...oapi.RequestEditorFn) *oapi.ListInstanceTypesResponse); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.ListInstanceTypesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListInstancesWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *ClientWithResponsesInterface) ListInstancesWithResponse(ctx context.Context, params *oapi.ListInstancesParams, reqEditors ...oapi.RequestEditorFn) (*oapi.ListInstancesResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.ListInstancesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *oapi.ListInstancesParams, ...oapi.RequestEditorFn) *oapi.ListInstancesResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.ListInstancesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *oapi.ListInstancesParams, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListLoadBalancersWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *ClientWithResponsesInterface) ListLoadBalancersWithResponse(ctx context.Context, reqEditors ...oapi.RequestEditorFn) (*oapi.ListLoadBalancersResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.ListLoadBalancersResponse
	if rf, ok := ret.Get(0).(func(context.Context, ...oapi.RequestEditorFn) *oapi.ListLoadBalancersResponse); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.ListLoadBalancersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPrivateNetworksWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *ClientWithResponsesInterface) ListPrivateNetworksWithResponse(ctx context.Context, reqEditors ...oapi.RequestEditorFn) (*oapi.ListPrivateNetworksResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.ListPrivateNetworksResponse
	if rf, ok := ret.Get(0).(func(context.Context, ...oapi.RequestEditorFn) *oapi.ListPrivateNetworksResponse); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.ListPrivateNetworksResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListQuotasWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *ClientWithResponsesInterface) ListQuotasWithResponse(ctx context.Context, reqEditors ...oapi.RequestEditorFn) (*oapi.ListQuotasResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.ListQuotasResponse
	if rf, ok := ret.Get(0).(func(context.Context, ...oapi.RequestEditorFn) *oapi.ListQuotasResponse); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.ListQuotasResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSecurityGroupsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *ClientWithResponsesInterface) ListSecurityGroupsWithResponse(ctx context.Context, params *oapi.ListSecurityGroupsParams, reqEditors ...oapi.RequestEditorFn) (*oapi.ListSecurityGroupsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.ListSecurityGroupsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *oapi.ListSecurityGroupsParams, ...oapi.RequestEditorFn) *oapi.ListSecurityGroupsResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.ListSecurityGroupsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *oapi.ListSecurityGroupsParams, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSksClusterDeprecatedResourcesWithResponse provides a mock function with given fields: ctx, id, reqEditors
func (_m *ClientWithResponsesInterface) ListSksClusterDeprecatedResourcesWithResponse(ctx context.Context, id string, reqEditors ...oapi.RequestEditorFn) (*oapi.ListSksClusterDeprecatedResourcesResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.ListSksClusterDeprecatedResourcesResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapi.RequestEditorFn) *oapi.ListSksClusterDeprecatedResourcesResponse); ok {
		r0 = rf(ctx, id, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.ListSksClusterDeprecatedResourcesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSksClusterVersionsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *ClientWithResponsesInterface) ListSksClusterVersionsWithResponse(ctx context.Context, params *oapi.ListSksClusterVersionsParams, reqEditors ...oapi.RequestEditorFn) (*oapi.ListSksClusterVersionsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.ListSksClusterVersionsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *oapi.ListSksClusterVersionsParams, ...oapi.RequestEditorFn) *oapi.ListSksClusterVersionsResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.ListSksClusterVersionsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *oapi.ListSksClusterVersionsParams, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSksClustersWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *ClientWithResponsesInterface) ListSksClustersWithResponse(ctx context.Context, reqEditors ...oapi.RequestEditorFn) (*oapi.ListSksClustersResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.ListSksClustersResponse
	if rf, ok := ret.Get(0).(func(context.Context, ...oapi.RequestEditorFn) *oapi.ListSksClustersResponse); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.ListSksClustersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSnapshotsWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *ClientWithResponsesInterface) ListSnapshotsWithResponse(ctx context.Context, reqEditors ...oapi.RequestEditorFn) (*oapi.ListSnapshotsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.ListSnapshotsResponse
	if rf, ok := ret.Get(0).(func(context.Context, ...oapi.RequestEditorFn) *oapi.ListSnapshotsResponse); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.ListSnapshotsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSosBucketsUsageWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *ClientWithResponsesInterface) ListSosBucketsUsageWithResponse(ctx context.Context, reqEditors ...oapi.RequestEditorFn) (*oapi.ListSosBucketsUsageResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.ListSosBucketsUsageResponse
	if rf, ok := ret.Get(0).(func(context.Context, ...oapi.RequestEditorFn) *oapi.ListSosBucketsUsageResponse); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.ListSosBucketsUsageResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSshKeysWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *ClientWithResponsesInterface) ListSshKeysWithResponse(ctx context.Context, reqEditors ...oapi.RequestEditorFn) (*oapi.ListSshKeysResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.ListSshKeysResponse
	if rf, ok := ret.Get(0).(func(context.Context, ...oapi.RequestEditorFn) *oapi.ListSshKeysResponse); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.ListSshKeysResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTemplatesWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *ClientWithResponsesInterface) ListTemplatesWithResponse(ctx context.Context, params *oapi.ListTemplatesParams, reqEditors ...oapi.RequestEditorFn) (*oapi.ListTemplatesResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.ListTemplatesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *oapi.ListTemplatesParams, ...oapi.RequestEditorFn) *oapi.ListTemplatesResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.ListTemplatesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *oapi.ListTemplatesParams, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListZonesWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *ClientWithResponsesInterface) ListZonesWithResponse(ctx context.Context, reqEditors ...oapi.RequestEditorFn) (*oapi.ListZonesResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.ListZonesResponse
	if rf, ok := ret.Get(0).(func(context.Context, ...oapi.RequestEditorFn) *oapi.ListZonesResponse); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.ListZonesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PromoteSnapshotToTemplateWithBodyWithResponse provides a mock function with given fields: ctx, id, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) PromoteSnapshotToTemplateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.PromoteSnapshotToTemplateResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.PromoteSnapshotToTemplateResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) *oapi.PromoteSnapshotToTemplateResponse); ok {
		r0 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.PromoteSnapshotToTemplateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PromoteSnapshotToTemplateWithResponse provides a mock function with given fields: ctx, id, body, reqEditors
func (_m *ClientWithResponsesInterface) PromoteSnapshotToTemplateWithResponse(ctx context.Context, id string, body oapi.PromoteSnapshotToTemplateJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.PromoteSnapshotToTemplateResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.PromoteSnapshotToTemplateResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, oapi.PromoteSnapshotToTemplateJSONRequestBody, ...oapi.RequestEditorFn) *oapi.PromoteSnapshotToTemplateResponse); ok {
		r0 = rf(ctx, id, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.PromoteSnapshotToTemplateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, oapi.PromoteSnapshotToTemplateJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RebootInstanceWithResponse provides a mock function with given fields: ctx, id, reqEditors
func (_m *ClientWithResponsesInterface) RebootInstanceWithResponse(ctx context.Context, id string, reqEditors ...oapi.RequestEditorFn) (*oapi.RebootInstanceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.RebootInstanceResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapi.RequestEditorFn) *oapi.RebootInstanceResponse); ok {
		r0 = rf(ctx, id, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.RebootInstanceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterSshKeyWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) RegisterSshKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.RegisterSshKeyResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.RegisterSshKeyResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...oapi.RequestEditorFn) *oapi.RegisterSshKeyResponse); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.RegisterSshKeyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterSshKeyWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *ClientWithResponsesInterface) RegisterSshKeyWithResponse(ctx context.Context, body oapi.RegisterSshKeyJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.RegisterSshKeyResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.RegisterSshKeyResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.RegisterSshKeyJSONRequestBody, ...oapi.RequestEditorFn) *oapi.RegisterSshKeyResponse); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.RegisterSshKeyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.RegisterSshKeyJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterTemplateWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) RegisterTemplateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.RegisterTemplateResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.RegisterTemplateResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...oapi.RequestEditorFn) *oapi.RegisterTemplateResponse); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.RegisterTemplateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterTemplateWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *ClientWithResponsesInterface) RegisterTemplateWithResponse(ctx context.Context, body oapi.RegisterTemplateJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.RegisterTemplateResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.RegisterTemplateResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.RegisterTemplateJSONRequestBody, ...oapi.RequestEditorFn) *oapi.RegisterTemplateResponse); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.RegisterTemplateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.RegisterTemplateJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveExternalSourceFromSecurityGroupWithBodyWithResponse provides a mock function with given fields: ctx, id, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) RemoveExternalSourceFromSecurityGroupWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.RemoveExternalSourceFromSecurityGroupResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.RemoveExternalSourceFromSecurityGroupResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) *oapi.RemoveExternalSourceFromSecurityGroupResponse); ok {
		r0 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.RemoveExternalSourceFromSecurityGroupResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveExternalSourceFromSecurityGroupWithResponse provides a mock function with given fields: ctx, id, body, reqEditors
func (_m *ClientWithResponsesInterface) RemoveExternalSourceFromSecurityGroupWithResponse(ctx context.Context, id string, body oapi.RemoveExternalSourceFromSecurityGroupJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.RemoveExternalSourceFromSecurityGroupResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.RemoveExternalSourceFromSecurityGroupResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, oapi.RemoveExternalSourceFromSecurityGroupJSONRequestBody, ...oapi.RequestEditorFn) *oapi.RemoveExternalSourceFromSecurityGroupResponse); ok {
		r0 = rf(ctx, id, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.RemoveExternalSourceFromSecurityGroupResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, oapi.RemoveExternalSourceFromSecurityGroupJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveInstanceProtectionWithResponse provides a mock function with given fields: ctx, id, reqEditors
func (_m *ClientWithResponsesInterface) RemoveInstanceProtectionWithResponse(ctx context.Context, id string, reqEditors ...oapi.RequestEditorFn) (*oapi.RemoveInstanceProtectionResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.RemoveInstanceProtectionResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapi.RequestEditorFn) *oapi.RemoveInstanceProtectionResponse); ok {
		r0 = rf(ctx, id, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.RemoveInstanceProtectionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetDbaasKafkaUserPasswordWithBodyWithResponse provides a mock function with given fields: ctx, serviceName, username, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) ResetDbaasKafkaUserPasswordWithBodyWithResponse(ctx context.Context, serviceName oapi.DbaasServiceName, username oapi.DbaasUserUsername, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.ResetDbaasKafkaUserPasswordResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, serviceName, username, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.ResetDbaasKafkaUserPasswordResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, oapi.DbaasUserUsername, string, io.Reader, ...oapi.RequestEditorFn) *oapi.ResetDbaasKafkaUserPasswordResponse); ok {
		r0 = rf(ctx, serviceName, username, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.ResetDbaasKafkaUserPasswordResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, oapi.DbaasUserUsername, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, serviceName, username, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetDbaasKafkaUserPasswordWithResponse provides a mock function with given fields: ctx, serviceName, username, body, reqEditors
func (_m *ClientWithResponsesInterface) ResetDbaasKafkaUserPasswordWithResponse(ctx context.Context, serviceName oapi.DbaasServiceName, username oapi.DbaasUserUsername, body oapi.ResetDbaasKafkaUserPasswordJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.ResetDbaasKafkaUserPasswordResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, serviceName, username, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.ResetDbaasKafkaUserPasswordResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, oapi.DbaasUserUsername, oapi.ResetDbaasKafkaUserPasswordJSONRequestBody, ...oapi.RequestEditorFn) *oapi.ResetDbaasKafkaUserPasswordResponse); ok {
		r0 = rf(ctx, serviceName, username, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.ResetDbaasKafkaUserPasswordResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, oapi.DbaasUserUsername, oapi.ResetDbaasKafkaUserPasswordJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, serviceName, username, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetDbaasMysqlUserPasswordWithBodyWithResponse provides a mock function with given fields: ctx, serviceName, username, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) ResetDbaasMysqlUserPasswordWithBodyWithResponse(ctx context.Context, serviceName oapi.DbaasServiceName, username oapi.DbaasUserUsername, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.ResetDbaasMysqlUserPasswordResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, serviceName, username, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.ResetDbaasMysqlUserPasswordResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, oapi.DbaasUserUsername, string, io.Reader, ...oapi.RequestEditorFn) *oapi.ResetDbaasMysqlUserPasswordResponse); ok {
		r0 = rf(ctx, serviceName, username, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.ResetDbaasMysqlUserPasswordResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, oapi.DbaasUserUsername, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, serviceName, username, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetDbaasMysqlUserPasswordWithResponse provides a mock function with given fields: ctx, serviceName, username, body, reqEditors
func (_m *ClientWithResponsesInterface) ResetDbaasMysqlUserPasswordWithResponse(ctx context.Context, serviceName oapi.DbaasServiceName, username oapi.DbaasUserUsername, body oapi.ResetDbaasMysqlUserPasswordJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.ResetDbaasMysqlUserPasswordResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, serviceName, username, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.ResetDbaasMysqlUserPasswordResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, oapi.DbaasUserUsername, oapi.ResetDbaasMysqlUserPasswordJSONRequestBody, ...oapi.RequestEditorFn) *oapi.ResetDbaasMysqlUserPasswordResponse); ok {
		r0 = rf(ctx, serviceName, username, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.ResetDbaasMysqlUserPasswordResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, oapi.DbaasUserUsername, oapi.ResetDbaasMysqlUserPasswordJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, serviceName, username, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetDbaasOpensearchUserPasswordWithBodyWithResponse provides a mock function with given fields: ctx, serviceName, username, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) ResetDbaasOpensearchUserPasswordWithBodyWithResponse(ctx context.Context, serviceName oapi.DbaasServiceName, username oapi.DbaasUserUsername, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.ResetDbaasOpensearchUserPasswordResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, serviceName, username, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.ResetDbaasOpensearchUserPasswordResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, oapi.DbaasUserUsername, string, io.Reader, ...oapi.RequestEditorFn) *oapi.ResetDbaasOpensearchUserPasswordResponse); ok {
		r0 = rf(ctx, serviceName, username, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.ResetDbaasOpensearchUserPasswordResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, oapi.DbaasUserUsername, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, serviceName, username, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetDbaasOpensearchUserPasswordWithResponse provides a mock function with given fields: ctx, serviceName, username, body, reqEditors
func (_m *ClientWithResponsesInterface) ResetDbaasOpensearchUserPasswordWithResponse(ctx context.Context, serviceName oapi.DbaasServiceName, username oapi.DbaasUserUsername, body oapi.ResetDbaasOpensearchUserPasswordJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.ResetDbaasOpensearchUserPasswordResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, serviceName, username, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.ResetDbaasOpensearchUserPasswordResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, oapi.DbaasUserUsername, oapi.ResetDbaasOpensearchUserPasswordJSONRequestBody, ...oapi.RequestEditorFn) *oapi.ResetDbaasOpensearchUserPasswordResponse); ok {
		r0 = rf(ctx, serviceName, username, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.ResetDbaasOpensearchUserPasswordResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, oapi.DbaasUserUsername, oapi.ResetDbaasOpensearchUserPasswordJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, serviceName, username, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetDbaasPostgresUserPasswordWithBodyWithResponse provides a mock function with given fields: ctx, serviceName, username, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) ResetDbaasPostgresUserPasswordWithBodyWithResponse(ctx context.Context, serviceName oapi.DbaasServiceName, username oapi.DbaasUserUsername, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.ResetDbaasPostgresUserPasswordResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, serviceName, username, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.ResetDbaasPostgresUserPasswordResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, oapi.DbaasUserUsername, string, io.Reader, ...oapi.RequestEditorFn) *oapi.ResetDbaasPostgresUserPasswordResponse); ok {
		r0 = rf(ctx, serviceName, username, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.ResetDbaasPostgresUserPasswordResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, oapi.DbaasUserUsername, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, serviceName, username, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetDbaasPostgresUserPasswordWithResponse provides a mock function with given fields: ctx, serviceName, username, body, reqEditors
func (_m *ClientWithResponsesInterface) ResetDbaasPostgresUserPasswordWithResponse(ctx context.Context, serviceName oapi.DbaasServiceName, username oapi.DbaasUserUsername, body oapi.ResetDbaasPostgresUserPasswordJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.ResetDbaasPostgresUserPasswordResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, serviceName, username, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.ResetDbaasPostgresUserPasswordResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, oapi.DbaasUserUsername, oapi.ResetDbaasPostgresUserPasswordJSONRequestBody, ...oapi.RequestEditorFn) *oapi.ResetDbaasPostgresUserPasswordResponse); ok {
		r0 = rf(ctx, serviceName, username, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.ResetDbaasPostgresUserPasswordResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, oapi.DbaasUserUsername, oapi.ResetDbaasPostgresUserPasswordJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, serviceName, username, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetElasticIpFieldWithResponse provides a mock function with given fields: ctx, id, field, reqEditors
func (_m *ClientWithResponsesInterface) ResetElasticIpFieldWithResponse(ctx context.Context, id string, field oapi.ResetElasticIpFieldParamsField, reqEditors ...oapi.RequestEditorFn) (*oapi.ResetElasticIpFieldResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, field)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.ResetElasticIpFieldResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, oapi.ResetElasticIpFieldParamsField, ...oapi.RequestEditorFn) *oapi.ResetElasticIpFieldResponse); ok {
		r0 = rf(ctx, id, field, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.ResetElasticIpFieldResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, oapi.ResetElasticIpFieldParamsField, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, field, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetInstanceFieldWithResponse provides a mock function with given fields: ctx, id, field, reqEditors
func (_m *ClientWithResponsesInterface) ResetInstanceFieldWithResponse(ctx context.Context, id string, field oapi.ResetInstanceFieldParamsField, reqEditors ...oapi.RequestEditorFn) (*oapi.ResetInstanceFieldResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, field)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.ResetInstanceFieldResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, oapi.ResetInstanceFieldParamsField, ...oapi.RequestEditorFn) *oapi.ResetInstanceFieldResponse); ok {
		r0 = rf(ctx, id, field, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.ResetInstanceFieldResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, oapi.ResetInstanceFieldParamsField, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, field, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetInstancePoolFieldWithResponse provides a mock function with given fields: ctx, id, field, reqEditors
func (_m *ClientWithResponsesInterface) ResetInstancePoolFieldWithResponse(ctx context.Context, id string, field oapi.ResetInstancePoolFieldParamsField, reqEditors ...oapi.RequestEditorFn) (*oapi.ResetInstancePoolFieldResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, field)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.ResetInstancePoolFieldResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, oapi.ResetInstancePoolFieldParamsField, ...oapi.RequestEditorFn) *oapi.ResetInstancePoolFieldResponse); ok {
		r0 = rf(ctx, id, field, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.ResetInstancePoolFieldResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, oapi.ResetInstancePoolFieldParamsField, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, field, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetInstanceWithBodyWithResponse provides a mock function with given fields: ctx, id, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) ResetInstanceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.ResetInstanceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.ResetInstanceResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) *oapi.ResetInstanceResponse); ok {
		r0 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.ResetInstanceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetInstanceWithResponse provides a mock function with given fields: ctx, id, body, reqEditors
func (_m *ClientWithResponsesInterface) ResetInstanceWithResponse(ctx context.Context, id string, body oapi.ResetInstanceJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.ResetInstanceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.ResetInstanceResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, oapi.ResetInstanceJSONRequestBody, ...oapi.RequestEditorFn) *oapi.ResetInstanceResponse); ok {
		r0 = rf(ctx, id, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.ResetInstanceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, oapi.ResetInstanceJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetLoadBalancerFieldWithResponse provides a mock function with given fields: ctx, id, field, reqEditors
func (_m *ClientWithResponsesInterface) ResetLoadBalancerFieldWithResponse(ctx context.Context, id string, field oapi.ResetLoadBalancerFieldParamsField, reqEditors ...oapi.RequestEditorFn) (*oapi.ResetLoadBalancerFieldResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, field)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.ResetLoadBalancerFieldResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, oapi.ResetLoadBalancerFieldParamsField, ...oapi.RequestEditorFn) *oapi.ResetLoadBalancerFieldResponse); ok {
		r0 = rf(ctx, id, field, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.ResetLoadBalancerFieldResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, oapi.ResetLoadBalancerFieldParamsField, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, field, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetLoadBalancerServiceFieldWithResponse provides a mock function with given fields: ctx, id, serviceId, field, reqEditors
func (_m *ClientWithResponsesInterface) ResetLoadBalancerServiceFieldWithResponse(ctx context.Context, id string, serviceId string, field oapi.ResetLoadBalancerServiceFieldParamsField, reqEditors ...oapi.RequestEditorFn) (*oapi.ResetLoadBalancerServiceFieldResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, serviceId, field)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.ResetLoadBalancerServiceFieldResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, oapi.ResetLoadBalancerServiceFieldParamsField, ...oapi.RequestEditorFn) *oapi.ResetLoadBalancerServiceFieldResponse); ok {
		r0 = rf(ctx, id, serviceId, field, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.ResetLoadBalancerServiceFieldResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, oapi.ResetLoadBalancerServiceFieldParamsField, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, serviceId, field, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetPrivateNetworkFieldWithResponse provides a mock function with given fields: ctx, id, field, reqEditors
func (_m *ClientWithResponsesInterface) ResetPrivateNetworkFieldWithResponse(ctx context.Context, id string, field oapi.ResetPrivateNetworkFieldParamsField, reqEditors ...oapi.RequestEditorFn) (*oapi.ResetPrivateNetworkFieldResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, field)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.ResetPrivateNetworkFieldResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, oapi.ResetPrivateNetworkFieldParamsField, ...oapi.RequestEditorFn) *oapi.ResetPrivateNetworkFieldResponse); ok {
		r0 = rf(ctx, id, field, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.ResetPrivateNetworkFieldResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, oapi.ResetPrivateNetworkFieldParamsField, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, field, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetSksClusterFieldWithResponse provides a mock function with given fields: ctx, id, field, reqEditors
func (_m *ClientWithResponsesInterface) ResetSksClusterFieldWithResponse(ctx context.Context, id string, field oapi.ResetSksClusterFieldParamsField, reqEditors ...oapi.RequestEditorFn) (*oapi.ResetSksClusterFieldResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, field)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.ResetSksClusterFieldResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, oapi.ResetSksClusterFieldParamsField, ...oapi.RequestEditorFn) *oapi.ResetSksClusterFieldResponse); ok {
		r0 = rf(ctx, id, field, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.ResetSksClusterFieldResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, oapi.ResetSksClusterFieldParamsField, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, field, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetSksNodepoolFieldWithResponse provides a mock function with given fields: ctx, id, sksNodepoolId, field, reqEditors
func (_m *ClientWithResponsesInterface) ResetSksNodepoolFieldWithResponse(ctx context.Context, id string, sksNodepoolId string, field oapi.ResetSksNodepoolFieldParamsField, reqEditors ...oapi.RequestEditorFn) (*oapi.ResetSksNodepoolFieldResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, sksNodepoolId, field)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.ResetSksNodepoolFieldResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, oapi.ResetSksNodepoolFieldParamsField, ...oapi.RequestEditorFn) *oapi.ResetSksNodepoolFieldResponse); ok {
		r0 = rf(ctx, id, sksNodepoolId, field, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.ResetSksNodepoolFieldResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, oapi.ResetSksNodepoolFieldParamsField, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, sksNodepoolId, field, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResizeInstanceDiskWithBodyWithResponse provides a mock function with given fields: ctx, id, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) ResizeInstanceDiskWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.ResizeInstanceDiskResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.ResizeInstanceDiskResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) *oapi.ResizeInstanceDiskResponse); ok {
		r0 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.ResizeInstanceDiskResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResizeInstanceDiskWithResponse provides a mock function with given fields: ctx, id, body, reqEditors
func (_m *ClientWithResponsesInterface) ResizeInstanceDiskWithResponse(ctx context.Context, id string, body oapi.ResizeInstanceDiskJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.ResizeInstanceDiskResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.ResizeInstanceDiskResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, oapi.ResizeInstanceDiskJSONRequestBody, ...oapi.RequestEditorFn) *oapi.ResizeInstanceDiskResponse); ok {
		r0 = rf(ctx, id, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.ResizeInstanceDiskResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, oapi.ResizeInstanceDiskJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RevealInstancePasswordWithResponse provides a mock function with given fields: ctx, id, reqEditors
func (_m *ClientWithResponsesInterface) RevealInstancePasswordWithResponse(ctx context.Context, id string, reqEditors ...oapi.RequestEditorFn) (*oapi.RevealInstancePasswordResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.RevealInstancePasswordResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapi.RequestEditorFn) *oapi.RevealInstancePasswordResponse); ok {
		r0 = rf(ctx, id, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.RevealInstancePasswordResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RevertInstanceToSnapshotWithBodyWithResponse provides a mock function with given fields: ctx, instanceId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) RevertInstanceToSnapshotWithBodyWithResponse(ctx context.Context, instanceId string, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.RevertInstanceToSnapshotResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, instanceId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.RevertInstanceToSnapshotResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) *oapi.RevertInstanceToSnapshotResponse); ok {
		r0 = rf(ctx, instanceId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.RevertInstanceToSnapshotResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, instanceId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RevertInstanceToSnapshotWithResponse provides a mock function with given fields: ctx, instanceId, body, reqEditors
func (_m *ClientWithResponsesInterface) RevertInstanceToSnapshotWithResponse(ctx context.Context, instanceId string, body oapi.RevertInstanceToSnapshotJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.RevertInstanceToSnapshotResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, instanceId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.RevertInstanceToSnapshotResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, oapi.RevertInstanceToSnapshotJSONRequestBody, ...oapi.RequestEditorFn) *oapi.RevertInstanceToSnapshotResponse); ok {
		r0 = rf(ctx, instanceId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.RevertInstanceToSnapshotResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, oapi.RevertInstanceToSnapshotJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, instanceId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RevokeAccessKeyWithResponse provides a mock function with given fields: ctx, key, reqEditors
func (_m *ClientWithResponsesInterface) RevokeAccessKeyWithResponse(ctx context.Context, key string, reqEditors ...oapi.RequestEditorFn) (*oapi.RevokeAccessKeyResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.RevokeAccessKeyResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapi.RequestEditorFn) *oapi.RevokeAccessKeyResponse); ok {
		r0 = rf(ctx, key, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.RevokeAccessKeyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, key, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RotateSksCcmCredentialsWithResponse provides a mock function with given fields: ctx, id, reqEditors
func (_m *ClientWithResponsesInterface) RotateSksCcmCredentialsWithResponse(ctx context.Context, id string, reqEditors ...oapi.RequestEditorFn) (*oapi.RotateSksCcmCredentialsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.RotateSksCcmCredentialsResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapi.RequestEditorFn) *oapi.RotateSksCcmCredentialsResponse); ok {
		r0 = rf(ctx, id, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.RotateSksCcmCredentialsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RotateSksOperatorsCaWithResponse provides a mock function with given fields: ctx, id, reqEditors
func (_m *ClientWithResponsesInterface) RotateSksOperatorsCaWithResponse(ctx context.Context, id string, reqEditors ...oapi.RequestEditorFn) (*oapi.RotateSksOperatorsCaResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.RotateSksOperatorsCaResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapi.RequestEditorFn) *oapi.RotateSksOperatorsCaResponse); ok {
		r0 = rf(ctx, id, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.RotateSksOperatorsCaResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScaleInstancePoolWithBodyWithResponse provides a mock function with given fields: ctx, id, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) ScaleInstancePoolWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.ScaleInstancePoolResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.ScaleInstancePoolResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) *oapi.ScaleInstancePoolResponse); ok {
		r0 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.ScaleInstancePoolResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScaleInstancePoolWithResponse provides a mock function with given fields: ctx, id, body, reqEditors
func (_m *ClientWithResponsesInterface) ScaleInstancePoolWithResponse(ctx context.Context, id string, body oapi.ScaleInstancePoolJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.ScaleInstancePoolResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.ScaleInstancePoolResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, oapi.ScaleInstancePoolJSONRequestBody, ...oapi.RequestEditorFn) *oapi.ScaleInstancePoolResponse); ok {
		r0 = rf(ctx, id, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.ScaleInstancePoolResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, oapi.ScaleInstancePoolJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScaleInstanceWithBodyWithResponse provides a mock function with given fields: ctx, id, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) ScaleInstanceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.ScaleInstanceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.ScaleInstanceResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) *oapi.ScaleInstanceResponse); ok {
		r0 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.ScaleInstanceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScaleInstanceWithResponse provides a mock function with given fields: ctx, id, body, reqEditors
func (_m *ClientWithResponsesInterface) ScaleInstanceWithResponse(ctx context.Context, id string, body oapi.ScaleInstanceJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.ScaleInstanceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.ScaleInstanceResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, oapi.ScaleInstanceJSONRequestBody, ...oapi.RequestEditorFn) *oapi.ScaleInstanceResponse); ok {
		r0 = rf(ctx, id, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.ScaleInstanceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, oapi.ScaleInstanceJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScaleSksNodepoolWithBodyWithResponse provides a mock function with given fields: ctx, id, sksNodepoolId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) ScaleSksNodepoolWithBodyWithResponse(ctx context.Context, id string, sksNodepoolId string, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.ScaleSksNodepoolResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, sksNodepoolId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.ScaleSksNodepoolResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...oapi.RequestEditorFn) *oapi.ScaleSksNodepoolResponse); ok {
		r0 = rf(ctx, id, sksNodepoolId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.ScaleSksNodepoolResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, sksNodepoolId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScaleSksNodepoolWithResponse provides a mock function with given fields: ctx, id, sksNodepoolId, body, reqEditors
func (_m *ClientWithResponsesInterface) ScaleSksNodepoolWithResponse(ctx context.Context, id string, sksNodepoolId string, body oapi.ScaleSksNodepoolJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.ScaleSksNodepoolResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, sksNodepoolId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.ScaleSksNodepoolResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, oapi.ScaleSksNodepoolJSONRequestBody, ...oapi.RequestEditorFn) *oapi.ScaleSksNodepoolResponse); ok {
		r0 = rf(ctx, id, sksNodepoolId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.ScaleSksNodepoolResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, oapi.ScaleSksNodepoolJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, sksNodepoolId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartDbaasGrafanaMaintenanceWithResponse provides a mock function with given fields: ctx, name, reqEditors
func (_m *ClientWithResponsesInterface) StartDbaasGrafanaMaintenanceWithResponse(ctx context.Context, name oapi.DbaasServiceName, reqEditors ...oapi.RequestEditorFn) (*oapi.StartDbaasGrafanaMaintenanceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.StartDbaasGrafanaMaintenanceResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, ...oapi.RequestEditorFn) *oapi.StartDbaasGrafanaMaintenanceResponse); ok {
		r0 = rf(ctx, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.StartDbaasGrafanaMaintenanceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartDbaasKafkaMaintenanceWithResponse provides a mock function with given fields: ctx, name, reqEditors
func (_m *ClientWithResponsesInterface) StartDbaasKafkaMaintenanceWithResponse(ctx context.Context, name oapi.DbaasServiceName, reqEditors ...oapi.RequestEditorFn) (*oapi.StartDbaasKafkaMaintenanceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.StartDbaasKafkaMaintenanceResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, ...oapi.RequestEditorFn) *oapi.StartDbaasKafkaMaintenanceResponse); ok {
		r0 = rf(ctx, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.StartDbaasKafkaMaintenanceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartDbaasMysqlMaintenanceWithResponse provides a mock function with given fields: ctx, name, reqEditors
func (_m *ClientWithResponsesInterface) StartDbaasMysqlMaintenanceWithResponse(ctx context.Context, name oapi.DbaasServiceName, reqEditors ...oapi.RequestEditorFn) (*oapi.StartDbaasMysqlMaintenanceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.StartDbaasMysqlMaintenanceResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, ...oapi.RequestEditorFn) *oapi.StartDbaasMysqlMaintenanceResponse); ok {
		r0 = rf(ctx, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.StartDbaasMysqlMaintenanceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartDbaasOpensearchMaintenanceWithResponse provides a mock function with given fields: ctx, name, reqEditors
func (_m *ClientWithResponsesInterface) StartDbaasOpensearchMaintenanceWithResponse(ctx context.Context, name oapi.DbaasServiceName, reqEditors ...oapi.RequestEditorFn) (*oapi.StartDbaasOpensearchMaintenanceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.StartDbaasOpensearchMaintenanceResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, ...oapi.RequestEditorFn) *oapi.StartDbaasOpensearchMaintenanceResponse); ok {
		r0 = rf(ctx, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.StartDbaasOpensearchMaintenanceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartDbaasPgMaintenanceWithResponse provides a mock function with given fields: ctx, name, reqEditors
func (_m *ClientWithResponsesInterface) StartDbaasPgMaintenanceWithResponse(ctx context.Context, name oapi.DbaasServiceName, reqEditors ...oapi.RequestEditorFn) (*oapi.StartDbaasPgMaintenanceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.StartDbaasPgMaintenanceResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, ...oapi.RequestEditorFn) *oapi.StartDbaasPgMaintenanceResponse); ok {
		r0 = rf(ctx, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.StartDbaasPgMaintenanceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartDbaasRedisMaintenanceWithResponse provides a mock function with given fields: ctx, name, reqEditors
func (_m *ClientWithResponsesInterface) StartDbaasRedisMaintenanceWithResponse(ctx context.Context, name oapi.DbaasServiceName, reqEditors ...oapi.RequestEditorFn) (*oapi.StartDbaasRedisMaintenanceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.StartDbaasRedisMaintenanceResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, ...oapi.RequestEditorFn) *oapi.StartDbaasRedisMaintenanceResponse); ok {
		r0 = rf(ctx, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.StartDbaasRedisMaintenanceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartInstanceWithBodyWithResponse provides a mock function with given fields: ctx, id, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) StartInstanceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.StartInstanceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.StartInstanceResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) *oapi.StartInstanceResponse); ok {
		r0 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.StartInstanceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartInstanceWithResponse provides a mock function with given fields: ctx, id, body, reqEditors
func (_m *ClientWithResponsesInterface) StartInstanceWithResponse(ctx context.Context, id string, body oapi.StartInstanceJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.StartInstanceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.StartInstanceResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, oapi.StartInstanceJSONRequestBody, ...oapi.RequestEditorFn) *oapi.StartInstanceResponse); ok {
		r0 = rf(ctx, id, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.StartInstanceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, oapi.StartInstanceJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopDbaasMysqlMigrationWithResponse provides a mock function with given fields: ctx, name, reqEditors
func (_m *ClientWithResponsesInterface) StopDbaasMysqlMigrationWithResponse(ctx context.Context, name oapi.DbaasServiceName, reqEditors ...oapi.RequestEditorFn) (*oapi.StopDbaasMysqlMigrationResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.StopDbaasMysqlMigrationResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, ...oapi.RequestEditorFn) *oapi.StopDbaasMysqlMigrationResponse); ok {
		r0 = rf(ctx, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.StopDbaasMysqlMigrationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopDbaasPgMigrationWithResponse provides a mock function with given fields: ctx, name, reqEditors
func (_m *ClientWithResponsesInterface) StopDbaasPgMigrationWithResponse(ctx context.Context, name oapi.DbaasServiceName, reqEditors ...oapi.RequestEditorFn) (*oapi.StopDbaasPgMigrationResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.StopDbaasPgMigrationResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, ...oapi.RequestEditorFn) *oapi.StopDbaasPgMigrationResponse); ok {
		r0 = rf(ctx, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.StopDbaasPgMigrationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopDbaasRedisMigrationWithResponse provides a mock function with given fields: ctx, name, reqEditors
func (_m *ClientWithResponsesInterface) StopDbaasRedisMigrationWithResponse(ctx context.Context, name oapi.DbaasServiceName, reqEditors ...oapi.RequestEditorFn) (*oapi.StopDbaasRedisMigrationResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.StopDbaasRedisMigrationResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, ...oapi.RequestEditorFn) *oapi.StopDbaasRedisMigrationResponse); ok {
		r0 = rf(ctx, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.StopDbaasRedisMigrationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopInstanceWithResponse provides a mock function with given fields: ctx, id, reqEditors
func (_m *ClientWithResponsesInterface) StopInstanceWithResponse(ctx context.Context, id string, reqEditors ...oapi.RequestEditorFn) (*oapi.StopInstanceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.StopInstanceResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapi.RequestEditorFn) *oapi.StopInstanceResponse); ok {
		r0 = rf(ctx, id, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.StopInstanceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDbaasIntegrationWithBodyWithResponse provides a mock function with given fields: ctx, id, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateDbaasIntegrationWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.UpdateDbaasIntegrationResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.UpdateDbaasIntegrationResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) *oapi.UpdateDbaasIntegrationResponse); ok {
		r0 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.UpdateDbaasIntegrationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDbaasIntegrationWithResponse provides a mock function with given fields: ctx, id, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateDbaasIntegrationWithResponse(ctx context.Context, id string, body oapi.UpdateDbaasIntegrationJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.UpdateDbaasIntegrationResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.UpdateDbaasIntegrationResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, oapi.UpdateDbaasIntegrationJSONRequestBody, ...oapi.RequestEditorFn) *oapi.UpdateDbaasIntegrationResponse); ok {
		r0 = rf(ctx, id, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.UpdateDbaasIntegrationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, oapi.UpdateDbaasIntegrationJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDbaasOpensearchAclConfigWithBodyWithResponse provides a mock function with given fields: ctx, name, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateDbaasOpensearchAclConfigWithBodyWithResponse(ctx context.Context, name oapi.DbaasServiceName, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.UpdateDbaasOpensearchAclConfigResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.UpdateDbaasOpensearchAclConfigResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, string, io.Reader, ...oapi.RequestEditorFn) *oapi.UpdateDbaasOpensearchAclConfigResponse); ok {
		r0 = rf(ctx, name, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.UpdateDbaasOpensearchAclConfigResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, name, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDbaasOpensearchAclConfigWithResponse provides a mock function with given fields: ctx, name, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateDbaasOpensearchAclConfigWithResponse(ctx context.Context, name oapi.DbaasServiceName, body oapi.UpdateDbaasOpensearchAclConfigJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.UpdateDbaasOpensearchAclConfigResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.UpdateDbaasOpensearchAclConfigResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, oapi.UpdateDbaasOpensearchAclConfigJSONRequestBody, ...oapi.RequestEditorFn) *oapi.UpdateDbaasOpensearchAclConfigResponse); ok {
		r0 = rf(ctx, name, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.UpdateDbaasOpensearchAclConfigResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, oapi.UpdateDbaasOpensearchAclConfigJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, name, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDbaasPgConnectionPoolWithBodyWithResponse provides a mock function with given fields: ctx, serviceName, connectionPoolName, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateDbaasPgConnectionPoolWithBodyWithResponse(ctx context.Context, serviceName oapi.DbaasServiceName, connectionPoolName oapi.DbaasPgPoolName, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.UpdateDbaasPgConnectionPoolResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, serviceName, connectionPoolName, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.UpdateDbaasPgConnectionPoolResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, oapi.DbaasPgPoolName, string, io.Reader, ...oapi.RequestEditorFn) *oapi.UpdateDbaasPgConnectionPoolResponse); ok {
		r0 = rf(ctx, serviceName, connectionPoolName, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.UpdateDbaasPgConnectionPoolResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, oapi.DbaasPgPoolName, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, serviceName, connectionPoolName, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDbaasPgConnectionPoolWithResponse provides a mock function with given fields: ctx, serviceName, connectionPoolName, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateDbaasPgConnectionPoolWithResponse(ctx context.Context, serviceName oapi.DbaasServiceName, connectionPoolName oapi.DbaasPgPoolName, body oapi.UpdateDbaasPgConnectionPoolJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.UpdateDbaasPgConnectionPoolResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, serviceName, connectionPoolName, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.UpdateDbaasPgConnectionPoolResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, oapi.DbaasPgPoolName, oapi.UpdateDbaasPgConnectionPoolJSONRequestBody, ...oapi.RequestEditorFn) *oapi.UpdateDbaasPgConnectionPoolResponse); ok {
		r0 = rf(ctx, serviceName, connectionPoolName, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.UpdateDbaasPgConnectionPoolResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, oapi.DbaasPgPoolName, oapi.UpdateDbaasPgConnectionPoolJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, serviceName, connectionPoolName, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDbaasPostgresAllowReplicationWithBodyWithResponse provides a mock function with given fields: ctx, serviceName, username, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateDbaasPostgresAllowReplicationWithBodyWithResponse(ctx context.Context, serviceName oapi.DbaasServiceName, username oapi.DbaasUserUsername, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.UpdateDbaasPostgresAllowReplicationResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, serviceName, username, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.UpdateDbaasPostgresAllowReplicationResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, oapi.DbaasUserUsername, string, io.Reader, ...oapi.RequestEditorFn) *oapi.UpdateDbaasPostgresAllowReplicationResponse); ok {
		r0 = rf(ctx, serviceName, username, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.UpdateDbaasPostgresAllowReplicationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, oapi.DbaasUserUsername, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, serviceName, username, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDbaasPostgresAllowReplicationWithResponse provides a mock function with given fields: ctx, serviceName, username, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateDbaasPostgresAllowReplicationWithResponse(ctx context.Context, serviceName oapi.DbaasServiceName, username oapi.DbaasUserUsername, body oapi.UpdateDbaasPostgresAllowReplicationJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.UpdateDbaasPostgresAllowReplicationResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, serviceName, username, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.UpdateDbaasPostgresAllowReplicationResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, oapi.DbaasUserUsername, oapi.UpdateDbaasPostgresAllowReplicationJSONRequestBody, ...oapi.RequestEditorFn) *oapi.UpdateDbaasPostgresAllowReplicationResponse); ok {
		r0 = rf(ctx, serviceName, username, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.UpdateDbaasPostgresAllowReplicationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, oapi.DbaasUserUsername, oapi.UpdateDbaasPostgresAllowReplicationJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, serviceName, username, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDbaasServiceGrafanaWithBodyWithResponse provides a mock function with given fields: ctx, name, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateDbaasServiceGrafanaWithBodyWithResponse(ctx context.Context, name oapi.DbaasServiceName, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.UpdateDbaasServiceGrafanaResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.UpdateDbaasServiceGrafanaResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, string, io.Reader, ...oapi.RequestEditorFn) *oapi.UpdateDbaasServiceGrafanaResponse); ok {
		r0 = rf(ctx, name, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.UpdateDbaasServiceGrafanaResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, name, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDbaasServiceGrafanaWithResponse provides a mock function with given fields: ctx, name, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateDbaasServiceGrafanaWithResponse(ctx context.Context, name oapi.DbaasServiceName, body oapi.UpdateDbaasServiceGrafanaJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.UpdateDbaasServiceGrafanaResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.UpdateDbaasServiceGrafanaResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, oapi.UpdateDbaasServiceGrafanaJSONRequestBody, ...oapi.RequestEditorFn) *oapi.UpdateDbaasServiceGrafanaResponse); ok {
		r0 = rf(ctx, name, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.UpdateDbaasServiceGrafanaResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, oapi.UpdateDbaasServiceGrafanaJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, name, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDbaasServiceKafkaWithBodyWithResponse provides a mock function with given fields: ctx, name, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateDbaasServiceKafkaWithBodyWithResponse(ctx context.Context, name oapi.DbaasServiceName, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.UpdateDbaasServiceKafkaResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.UpdateDbaasServiceKafkaResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, string, io.Reader, ...oapi.RequestEditorFn) *oapi.UpdateDbaasServiceKafkaResponse); ok {
		r0 = rf(ctx, name, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.UpdateDbaasServiceKafkaResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, name, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDbaasServiceKafkaWithResponse provides a mock function with given fields: ctx, name, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateDbaasServiceKafkaWithResponse(ctx context.Context, name oapi.DbaasServiceName, body oapi.UpdateDbaasServiceKafkaJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.UpdateDbaasServiceKafkaResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.UpdateDbaasServiceKafkaResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, oapi.UpdateDbaasServiceKafkaJSONRequestBody, ...oapi.RequestEditorFn) *oapi.UpdateDbaasServiceKafkaResponse); ok {
		r0 = rf(ctx, name, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.UpdateDbaasServiceKafkaResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, oapi.UpdateDbaasServiceKafkaJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, name, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDbaasServiceMysqlWithBodyWithResponse provides a mock function with given fields: ctx, name, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateDbaasServiceMysqlWithBodyWithResponse(ctx context.Context, name oapi.DbaasServiceName, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.UpdateDbaasServiceMysqlResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.UpdateDbaasServiceMysqlResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, string, io.Reader, ...oapi.RequestEditorFn) *oapi.UpdateDbaasServiceMysqlResponse); ok {
		r0 = rf(ctx, name, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.UpdateDbaasServiceMysqlResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, name, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDbaasServiceMysqlWithResponse provides a mock function with given fields: ctx, name, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateDbaasServiceMysqlWithResponse(ctx context.Context, name oapi.DbaasServiceName, body oapi.UpdateDbaasServiceMysqlJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.UpdateDbaasServiceMysqlResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.UpdateDbaasServiceMysqlResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, oapi.UpdateDbaasServiceMysqlJSONRequestBody, ...oapi.RequestEditorFn) *oapi.UpdateDbaasServiceMysqlResponse); ok {
		r0 = rf(ctx, name, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.UpdateDbaasServiceMysqlResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, oapi.UpdateDbaasServiceMysqlJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, name, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDbaasServiceOpensearchWithBodyWithResponse provides a mock function with given fields: ctx, name, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateDbaasServiceOpensearchWithBodyWithResponse(ctx context.Context, name oapi.DbaasServiceName, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.UpdateDbaasServiceOpensearchResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.UpdateDbaasServiceOpensearchResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, string, io.Reader, ...oapi.RequestEditorFn) *oapi.UpdateDbaasServiceOpensearchResponse); ok {
		r0 = rf(ctx, name, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.UpdateDbaasServiceOpensearchResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, name, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDbaasServiceOpensearchWithResponse provides a mock function with given fields: ctx, name, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateDbaasServiceOpensearchWithResponse(ctx context.Context, name oapi.DbaasServiceName, body oapi.UpdateDbaasServiceOpensearchJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.UpdateDbaasServiceOpensearchResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.UpdateDbaasServiceOpensearchResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, oapi.UpdateDbaasServiceOpensearchJSONRequestBody, ...oapi.RequestEditorFn) *oapi.UpdateDbaasServiceOpensearchResponse); ok {
		r0 = rf(ctx, name, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.UpdateDbaasServiceOpensearchResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, oapi.UpdateDbaasServiceOpensearchJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, name, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDbaasServicePgWithBodyWithResponse provides a mock function with given fields: ctx, name, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateDbaasServicePgWithBodyWithResponse(ctx context.Context, name oapi.DbaasServiceName, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.UpdateDbaasServicePgResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.UpdateDbaasServicePgResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, string, io.Reader, ...oapi.RequestEditorFn) *oapi.UpdateDbaasServicePgResponse); ok {
		r0 = rf(ctx, name, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.UpdateDbaasServicePgResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, name, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDbaasServicePgWithResponse provides a mock function with given fields: ctx, name, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateDbaasServicePgWithResponse(ctx context.Context, name oapi.DbaasServiceName, body oapi.UpdateDbaasServicePgJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.UpdateDbaasServicePgResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.UpdateDbaasServicePgResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, oapi.UpdateDbaasServicePgJSONRequestBody, ...oapi.RequestEditorFn) *oapi.UpdateDbaasServicePgResponse); ok {
		r0 = rf(ctx, name, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.UpdateDbaasServicePgResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, oapi.UpdateDbaasServicePgJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, name, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDbaasServiceRedisWithBodyWithResponse provides a mock function with given fields: ctx, name, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateDbaasServiceRedisWithBodyWithResponse(ctx context.Context, name oapi.DbaasServiceName, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.UpdateDbaasServiceRedisResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.UpdateDbaasServiceRedisResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, string, io.Reader, ...oapi.RequestEditorFn) *oapi.UpdateDbaasServiceRedisResponse); ok {
		r0 = rf(ctx, name, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.UpdateDbaasServiceRedisResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, name, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDbaasServiceRedisWithResponse provides a mock function with given fields: ctx, name, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateDbaasServiceRedisWithResponse(ctx context.Context, name oapi.DbaasServiceName, body oapi.UpdateDbaasServiceRedisJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.UpdateDbaasServiceRedisResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.UpdateDbaasServiceRedisResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.DbaasServiceName, oapi.UpdateDbaasServiceRedisJSONRequestBody, ...oapi.RequestEditorFn) *oapi.UpdateDbaasServiceRedisResponse); ok {
		r0 = rf(ctx, name, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.UpdateDbaasServiceRedisResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.DbaasServiceName, oapi.UpdateDbaasServiceRedisJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, name, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDnsDomainRecordWithBodyWithResponse provides a mock function with given fields: ctx, domainId, recordId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateDnsDomainRecordWithBodyWithResponse(ctx context.Context, domainId string, recordId string, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.UpdateDnsDomainRecordResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, domainId, recordId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.UpdateDnsDomainRecordResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...oapi.RequestEditorFn) *oapi.UpdateDnsDomainRecordResponse); ok {
		r0 = rf(ctx, domainId, recordId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.UpdateDnsDomainRecordResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, domainId, recordId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDnsDomainRecordWithResponse provides a mock function with given fields: ctx, domainId, recordId, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateDnsDomainRecordWithResponse(ctx context.Context, domainId string, recordId string, body oapi.UpdateDnsDomainRecordJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.UpdateDnsDomainRecordResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, domainId, recordId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.UpdateDnsDomainRecordResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, oapi.UpdateDnsDomainRecordJSONRequestBody, ...oapi.RequestEditorFn) *oapi.UpdateDnsDomainRecordResponse); ok {
		r0 = rf(ctx, domainId, recordId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.UpdateDnsDomainRecordResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, oapi.UpdateDnsDomainRecordJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, domainId, recordId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateElasticIpWithBodyWithResponse provides a mock function with given fields: ctx, id, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateElasticIpWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.UpdateElasticIpResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.UpdateElasticIpResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) *oapi.UpdateElasticIpResponse); ok {
		r0 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.UpdateElasticIpResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateElasticIpWithResponse provides a mock function with given fields: ctx, id, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateElasticIpWithResponse(ctx context.Context, id string, body oapi.UpdateElasticIpJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.UpdateElasticIpResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.UpdateElasticIpResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, oapi.UpdateElasticIpJSONRequestBody, ...oapi.RequestEditorFn) *oapi.UpdateElasticIpResponse); ok {
		r0 = rf(ctx, id, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.UpdateElasticIpResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, oapi.UpdateElasticIpJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateIamOrganizationPolicyWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateIamOrganizationPolicyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.UpdateIamOrganizationPolicyResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.UpdateIamOrganizationPolicyResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...oapi.RequestEditorFn) *oapi.UpdateIamOrganizationPolicyResponse); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.UpdateIamOrganizationPolicyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateIamOrganizationPolicyWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateIamOrganizationPolicyWithResponse(ctx context.Context, body oapi.UpdateIamOrganizationPolicyJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.UpdateIamOrganizationPolicyResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.UpdateIamOrganizationPolicyResponse
	if rf, ok := ret.Get(0).(func(context.Context, oapi.UpdateIamOrganizationPolicyJSONRequestBody, ...oapi.RequestEditorFn) *oapi.UpdateIamOrganizationPolicyResponse); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.UpdateIamOrganizationPolicyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, oapi.UpdateIamOrganizationPolicyJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateIamRolePolicyWithBodyWithResponse provides a mock function with given fields: ctx, id, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateIamRolePolicyWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.UpdateIamRolePolicyResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.UpdateIamRolePolicyResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) *oapi.UpdateIamRolePolicyResponse); ok {
		r0 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.UpdateIamRolePolicyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateIamRolePolicyWithResponse provides a mock function with given fields: ctx, id, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateIamRolePolicyWithResponse(ctx context.Context, id string, body oapi.UpdateIamRolePolicyJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.UpdateIamRolePolicyResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.UpdateIamRolePolicyResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, oapi.UpdateIamRolePolicyJSONRequestBody, ...oapi.RequestEditorFn) *oapi.UpdateIamRolePolicyResponse); ok {
		r0 = rf(ctx, id, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.UpdateIamRolePolicyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, oapi.UpdateIamRolePolicyJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateIamRoleWithBodyWithResponse provides a mock function with given fields: ctx, id, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateIamRoleWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.UpdateIamRoleResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.UpdateIamRoleResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) *oapi.UpdateIamRoleResponse); ok {
		r0 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.UpdateIamRoleResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateIamRoleWithResponse provides a mock function with given fields: ctx, id, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateIamRoleWithResponse(ctx context.Context, id string, body oapi.UpdateIamRoleJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.UpdateIamRoleResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.UpdateIamRoleResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, oapi.UpdateIamRoleJSONRequestBody, ...oapi.RequestEditorFn) *oapi.UpdateIamRoleResponse); ok {
		r0 = rf(ctx, id, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.UpdateIamRoleResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, oapi.UpdateIamRoleJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateInstancePoolWithBodyWithResponse provides a mock function with given fields: ctx, id, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateInstancePoolWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.UpdateInstancePoolResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.UpdateInstancePoolResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) *oapi.UpdateInstancePoolResponse); ok {
		r0 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.UpdateInstancePoolResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateInstancePoolWithResponse provides a mock function with given fields: ctx, id, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateInstancePoolWithResponse(ctx context.Context, id string, body oapi.UpdateInstancePoolJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.UpdateInstancePoolResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.UpdateInstancePoolResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, oapi.UpdateInstancePoolJSONRequestBody, ...oapi.RequestEditorFn) *oapi.UpdateInstancePoolResponse); ok {
		r0 = rf(ctx, id, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.UpdateInstancePoolResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, oapi.UpdateInstancePoolJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateInstanceWithBodyWithResponse provides a mock function with given fields: ctx, id, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateInstanceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.UpdateInstanceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.UpdateInstanceResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) *oapi.UpdateInstanceResponse); ok {
		r0 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.UpdateInstanceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateInstanceWithResponse provides a mock function with given fields: ctx, id, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateInstanceWithResponse(ctx context.Context, id string, body oapi.UpdateInstanceJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.UpdateInstanceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.UpdateInstanceResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, oapi.UpdateInstanceJSONRequestBody, ...oapi.RequestEditorFn) *oapi.UpdateInstanceResponse); ok {
		r0 = rf(ctx, id, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.UpdateInstanceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, oapi.UpdateInstanceJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLoadBalancerServiceWithBodyWithResponse provides a mock function with given fields: ctx, id, serviceId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateLoadBalancerServiceWithBodyWithResponse(ctx context.Context, id string, serviceId string, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.UpdateLoadBalancerServiceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, serviceId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.UpdateLoadBalancerServiceResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...oapi.RequestEditorFn) *oapi.UpdateLoadBalancerServiceResponse); ok {
		r0 = rf(ctx, id, serviceId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.UpdateLoadBalancerServiceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, serviceId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLoadBalancerServiceWithResponse provides a mock function with given fields: ctx, id, serviceId, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateLoadBalancerServiceWithResponse(ctx context.Context, id string, serviceId string, body oapi.UpdateLoadBalancerServiceJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.UpdateLoadBalancerServiceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, serviceId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.UpdateLoadBalancerServiceResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, oapi.UpdateLoadBalancerServiceJSONRequestBody, ...oapi.RequestEditorFn) *oapi.UpdateLoadBalancerServiceResponse); ok {
		r0 = rf(ctx, id, serviceId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.UpdateLoadBalancerServiceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, oapi.UpdateLoadBalancerServiceJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, serviceId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLoadBalancerWithBodyWithResponse provides a mock function with given fields: ctx, id, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateLoadBalancerWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.UpdateLoadBalancerResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.UpdateLoadBalancerResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) *oapi.UpdateLoadBalancerResponse); ok {
		r0 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.UpdateLoadBalancerResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLoadBalancerWithResponse provides a mock function with given fields: ctx, id, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateLoadBalancerWithResponse(ctx context.Context, id string, body oapi.UpdateLoadBalancerJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.UpdateLoadBalancerResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.UpdateLoadBalancerResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, oapi.UpdateLoadBalancerJSONRequestBody, ...oapi.RequestEditorFn) *oapi.UpdateLoadBalancerResponse); ok {
		r0 = rf(ctx, id, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.UpdateLoadBalancerResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, oapi.UpdateLoadBalancerJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePrivateNetworkInstanceIpWithBodyWithResponse provides a mock function with given fields: ctx, id, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdatePrivateNetworkInstanceIpWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.UpdatePrivateNetworkInstanceIpResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.UpdatePrivateNetworkInstanceIpResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) *oapi.UpdatePrivateNetworkInstanceIpResponse); ok {
		r0 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.UpdatePrivateNetworkInstanceIpResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePrivateNetworkInstanceIpWithResponse provides a mock function with given fields: ctx, id, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdatePrivateNetworkInstanceIpWithResponse(ctx context.Context, id string, body oapi.UpdatePrivateNetworkInstanceIpJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.UpdatePrivateNetworkInstanceIpResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.UpdatePrivateNetworkInstanceIpResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, oapi.UpdatePrivateNetworkInstanceIpJSONRequestBody, ...oapi.RequestEditorFn) *oapi.UpdatePrivateNetworkInstanceIpResponse); ok {
		r0 = rf(ctx, id, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.UpdatePrivateNetworkInstanceIpResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, oapi.UpdatePrivateNetworkInstanceIpJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePrivateNetworkWithBodyWithResponse provides a mock function with given fields: ctx, id, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdatePrivateNetworkWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.UpdatePrivateNetworkResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.UpdatePrivateNetworkResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) *oapi.UpdatePrivateNetworkResponse); ok {
		r0 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.UpdatePrivateNetworkResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePrivateNetworkWithResponse provides a mock function with given fields: ctx, id, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdatePrivateNetworkWithResponse(ctx context.Context, id string, body oapi.UpdatePrivateNetworkJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.UpdatePrivateNetworkResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.UpdatePrivateNetworkResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, oapi.UpdatePrivateNetworkJSONRequestBody, ...oapi.RequestEditorFn) *oapi.UpdatePrivateNetworkResponse); ok {
		r0 = rf(ctx, id, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.UpdatePrivateNetworkResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, oapi.UpdatePrivateNetworkJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateReverseDnsElasticIpWithBodyWithResponse provides a mock function with given fields: ctx, id, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateReverseDnsElasticIpWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.UpdateReverseDnsElasticIpResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.UpdateReverseDnsElasticIpResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) *oapi.UpdateReverseDnsElasticIpResponse); ok {
		r0 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.UpdateReverseDnsElasticIpResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateReverseDnsElasticIpWithResponse provides a mock function with given fields: ctx, id, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateReverseDnsElasticIpWithResponse(ctx context.Context, id string, body oapi.UpdateReverseDnsElasticIpJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.UpdateReverseDnsElasticIpResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.UpdateReverseDnsElasticIpResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, oapi.UpdateReverseDnsElasticIpJSONRequestBody, ...oapi.RequestEditorFn) *oapi.UpdateReverseDnsElasticIpResponse); ok {
		r0 = rf(ctx, id, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.UpdateReverseDnsElasticIpResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, oapi.UpdateReverseDnsElasticIpJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateReverseDnsInstanceWithBodyWithResponse provides a mock function with given fields: ctx, id, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateReverseDnsInstanceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.UpdateReverseDnsInstanceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.UpdateReverseDnsInstanceResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) *oapi.UpdateReverseDnsInstanceResponse); ok {
		r0 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.UpdateReverseDnsInstanceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateReverseDnsInstanceWithResponse provides a mock function with given fields: ctx, id, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateReverseDnsInstanceWithResponse(ctx context.Context, id string, body oapi.UpdateReverseDnsInstanceJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.UpdateReverseDnsInstanceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.UpdateReverseDnsInstanceResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, oapi.UpdateReverseDnsInstanceJSONRequestBody, ...oapi.RequestEditorFn) *oapi.UpdateReverseDnsInstanceResponse); ok {
		r0 = rf(ctx, id, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.UpdateReverseDnsInstanceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, oapi.UpdateReverseDnsInstanceJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSksClusterWithBodyWithResponse provides a mock function with given fields: ctx, id, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateSksClusterWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.UpdateSksClusterResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.UpdateSksClusterResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) *oapi.UpdateSksClusterResponse); ok {
		r0 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.UpdateSksClusterResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSksClusterWithResponse provides a mock function with given fields: ctx, id, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateSksClusterWithResponse(ctx context.Context, id string, body oapi.UpdateSksClusterJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.UpdateSksClusterResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.UpdateSksClusterResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, oapi.UpdateSksClusterJSONRequestBody, ...oapi.RequestEditorFn) *oapi.UpdateSksClusterResponse); ok {
		r0 = rf(ctx, id, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.UpdateSksClusterResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, oapi.UpdateSksClusterJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSksNodepoolWithBodyWithResponse provides a mock function with given fields: ctx, id, sksNodepoolId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateSksNodepoolWithBodyWithResponse(ctx context.Context, id string, sksNodepoolId string, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.UpdateSksNodepoolResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, sksNodepoolId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.UpdateSksNodepoolResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...oapi.RequestEditorFn) *oapi.UpdateSksNodepoolResponse); ok {
		r0 = rf(ctx, id, sksNodepoolId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.UpdateSksNodepoolResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, sksNodepoolId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSksNodepoolWithResponse provides a mock function with given fields: ctx, id, sksNodepoolId, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateSksNodepoolWithResponse(ctx context.Context, id string, sksNodepoolId string, body oapi.UpdateSksNodepoolJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.UpdateSksNodepoolResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, sksNodepoolId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.UpdateSksNodepoolResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, oapi.UpdateSksNodepoolJSONRequestBody, ...oapi.RequestEditorFn) *oapi.UpdateSksNodepoolResponse); ok {
		r0 = rf(ctx, id, sksNodepoolId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.UpdateSksNodepoolResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, oapi.UpdateSksNodepoolJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, sksNodepoolId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTemplateWithBodyWithResponse provides a mock function with given fields: ctx, id, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateTemplateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.UpdateTemplateResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.UpdateTemplateResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) *oapi.UpdateTemplateResponse); ok {
		r0 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.UpdateTemplateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTemplateWithResponse provides a mock function with given fields: ctx, id, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateTemplateWithResponse(ctx context.Context, id string, body oapi.UpdateTemplateJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.UpdateTemplateResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.UpdateTemplateResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, oapi.UpdateTemplateJSONRequestBody, ...oapi.RequestEditorFn) *oapi.UpdateTemplateResponse); ok {
		r0 = rf(ctx, id, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.UpdateTemplateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, oapi.UpdateTemplateJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpgradeSksClusterServiceLevelWithResponse provides a mock function with given fields: ctx, id, reqEditors
func (_m *ClientWithResponsesInterface) UpgradeSksClusterServiceLevelWithResponse(ctx context.Context, id string, reqEditors ...oapi.RequestEditorFn) (*oapi.UpgradeSksClusterServiceLevelResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.UpgradeSksClusterServiceLevelResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...oapi.RequestEditorFn) *oapi.UpgradeSksClusterServiceLevelResponse); ok {
		r0 = rf(ctx, id, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.UpgradeSksClusterServiceLevelResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpgradeSksClusterWithBodyWithResponse provides a mock function with given fields: ctx, id, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) UpgradeSksClusterWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...oapi.RequestEditorFn) (*oapi.UpgradeSksClusterResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.UpgradeSksClusterResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) *oapi.UpgradeSksClusterResponse); ok {
		r0 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.UpgradeSksClusterResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpgradeSksClusterWithResponse provides a mock function with given fields: ctx, id, body, reqEditors
func (_m *ClientWithResponsesInterface) UpgradeSksClusterWithResponse(ctx context.Context, id string, body oapi.UpgradeSksClusterJSONRequestBody, reqEditors ...oapi.RequestEditorFn) (*oapi.UpgradeSksClusterResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *oapi.UpgradeSksClusterResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, oapi.UpgradeSksClusterJSONRequestBody, ...oapi.RequestEditorFn) *oapi.UpgradeSksClusterResponse); ok {
		r0 = rf(ctx, id, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapi.UpgradeSksClusterResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, oapi.UpgradeSksClusterJSONRequestBody, ...oapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewClientWithResponsesInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewClientWithResponsesInterface creates a new instance of ClientWithResponsesInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClientWithResponsesInterface(t mockConstructorTestingTNewClientWithResponsesInterface) *ClientWithResponsesInterface {
	mock := &ClientWithResponsesInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
