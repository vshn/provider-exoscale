package iamkeycontroller

import (
	exooapi "github.com/exoscale/egoscale/v2/oapi"
	"k8s.io/utils/ptr"
)

var (
	policyAllow = exooapi.IamServicePolicyRuleActionAllow
	policyDeny  = exooapi.IamServicePolicyRuleActionDeny
)

func createRole(keyName string, buckets []string) *exooapi.IamRole {

	policyRules := exooapi.IamServicePolicyTypeRules

	iamRole := &exooapi.IamRole{
		Name:        &keyName,
		Description: ptr.To("IAM Role for SOS+IAM creation, it was autogenerated by provider-exoscale"),
		Permissions: &[]exooapi.IamRolePermissions{
			exooapi.IamRolePermissionsBypassGovernanceRetention,
		},
		Editable: ptr.To(true),
		Policy: &exooapi.IamPolicy{
			DefaultServiceStrategy: exooapi.IamPolicyDefaultServiceStrategyDeny,
			Services: exooapi.IamPolicy_Services{
				AdditionalProperties: map[string]exooapi.IamServicePolicy{
					"sos": {
						Type:  &policyRules,
						Rules: &[]exooapi.IamServicePolicyRule{},
					},
				},
			},
		},
	}

	// We specifically need to deny the listing of buckets, or the customer is able to see all of them
	*iamRole.Policy.Services.AdditionalProperties["sos"].Rules = append(*iamRole.Policy.Services.AdditionalProperties["sos"].Rules, exooapi.IamServicePolicyRule{
		Action:     &policyDeny,
		Expression: ptr.To("operation in ['list-sos-buckets-usage', 'list-buckets']"),
	})

	// we must first add buckets to deny list and then add the allow rule, otherwise it will not work
	for _, bucket := range buckets {
		*iamRole.Policy.Services.AdditionalProperties["sos"].Rules = append(*iamRole.Policy.Services.AdditionalProperties["sos"].Rules, exooapi.IamServicePolicyRule{
			Action:     &policyDeny,
			Expression: ptr.To("resources.bucket != " + "'" + bucket + "'"),
		})
	}

	*iamRole.Policy.Services.AdditionalProperties["sos"].Rules = append(*iamRole.Policy.Services.AdditionalProperties["sos"].Rules, exooapi.IamServicePolicyRule{
		Action:     &policyAllow,
		Expression: ptr.To("true"),
	})

	return iamRole
}
