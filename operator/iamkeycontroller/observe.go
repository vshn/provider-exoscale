package iamkeycontroller

import (
	"context"
	"encoding/json"
	"fmt"
	"net/url"

	pipeline "github.com/ccremer/go-command-pipeline"
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	"github.com/crossplane/crossplane-runtime/pkg/errors"
	"github.com/crossplane/crossplane-runtime/pkg/reconciler/managed"
	"github.com/crossplane/crossplane-runtime/pkg/resource"
	exoscalesdk "github.com/exoscale/egoscale/v2"
	exooapi "github.com/exoscale/egoscale/v2/oapi"
	exoscalev1 "github.com/vshn/provider-exoscale/apis/exoscale/v1"
	"github.com/vshn/provider-exoscale/operator/pipelineutil"
	corev1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/types"
	controllerruntime "sigs.k8s.io/controller-runtime"
)

// Observe implements managed.ExternalClient.
func (p *IAMKeyPipeline) Observe(ctx context.Context, mg resource.Managed) (managed.ExternalObservation, error) {
	log := controllerruntime.LoggerFrom(ctx)
	log.V(1).Info("Observing resource")

	iamKey := fromManaged(mg)
	if iamKey.Status.AtProvider.KeyID == "" {
		// get the data generated by Create() via annotations, since in Create() we're not allowed to update the status.
		if KeyId, exists := iamKey.Annotations[KeyIDAnnotationKey]; exists {
			iamKey.Status.AtProvider.KeyID = KeyId
			delete(iamKey.Annotations, KeyIDAnnotationKey)
			log.V(1).Info("Deleting annotation", "key", KeyIDAnnotationKey)
		} else {
			// New resource, create user first
			log.V(1).Info("IAM key not found, returning")
			return managed.ExternalObservation{}, nil
		}
	}

	pctx := &pipelineContext{Context: ctx, iamKey: iamKey}
	err := p.getIAMKey(pctx)
	if err != nil {
		return managed.ExternalObservation{ResourceExists: false}, resource.Ignore(isNotFound, err)
	}

	pipe := pipeline.NewPipeline[*pipelineContext]()
	err = pipe.WithBeforeHooks(pipelineutil.DebugLogger(pctx)).
		WithSteps(
			pipe.NewStep("fetch credentials secret", p.fetchCredentialsSecret),
			pipe.NewStep("check credentials", p.checkSecret),
		).RunWithContext(pctx)

	if err != nil {
		log.V(2).Info("pipeline that fetches and checks credentials secret returned", "error", err)
		return managed.ExternalObservation{ResourceExists: true, ResourceUpToDate: false}, nil
	}

	log.V(1).Info("Observing resource line 58")
	fmt.Println(*pctx.iamExoscaleKey.Name)
	iamKey.Status.AtProvider.KeyName = *pctx.iamExoscaleKey.Name

	iamKey.SetConditions(xpv1.Available())
	connDetails, err := toConnectionDetails(pctx.iamExoscaleKey)
	if err != nil {
		return managed.ExternalObservation{}, fmt.Errorf("cannot parse connection details: %w", err)
	}
	log.Info("Observation successfull", "keyName", iamKey.Status.AtProvider.KeyName)
	return managed.ExternalObservation{ResourceExists: true, ResourceUpToDate: true, ConnectionDetails: connDetails}, nil
}

// getIAMKey fetches an existing IAM key from the project associated with the API Key and Secret.
func (p *IAMKeyPipeline) getIAMKey(ctx *pipelineContext) error {
	log := controllerruntime.LoggerFrom(ctx)
	keyDetails := exooapi.IamApiKey{}

	// send request
	resp, err := ExecuteRequest(ctx, "GET", ctx.iamKey.Spec.ForProvider.Zone, "/v2/api-key/"+ctx.iamKey.ObjectMeta.Annotations[KeyIDAnnotationKey], nil)
	if err != nil {
		log.Error(err, "Cannot list apiKeys")
		return err
	}

	err = json.NewDecoder(resp.Body).Decode(&keyDetails)
	if err != nil {
		log.Error(err, "Cannot decode response body (IamKeyGet)")
		return err
	}

	ctx.iamExoscaleKey = &exoscalesdk.IAMAccessKey{
		Key:  keyDetails.Key,
		Name: keyDetails.Name,
	}

	log.Info("IAM key fetched successfully", "keyName", ctx.iamKey.Spec.ForProvider.KeyName, "response", resp.Status)

	return nil

}

func (p *IAMKeyPipeline) fetchCredentialsSecret(ctx *pipelineContext) error {
	log := controllerruntime.LoggerFrom(ctx)
	secretRef := ctx.iamKey.Spec.WriteConnectionSecretToReference
	ctx.credentialsSecret = &corev1.Secret{}
	log.Info("Fetching credentials secret during iamkey observation", secretRef.Namespace, secretRef.Name)
	err := p.kube.Get(ctx, types.NamespacedName{Namespace: secretRef.Namespace, Name: secretRef.Name}, ctx.credentialsSecret)
	if err != nil {
		log.Error(err, "Cannot fetch credentials secret")
		return err
	}
	return nil

}

func (p *IAMKeyPipeline) checkSecret(ctx *pipelineContext) error {
	data := ctx.credentialsSecret.Data
	fmt.Println("data: ", data)
	if len(data) == 0 {
		return fmt.Errorf("secret %q does not have any data", fmt.Sprintf("%s/%s", ctx.credentialsSecret.Namespace, ctx.credentialsSecret.Name))
	}
	fmt.Println("after len in checkSecret")
	// Populate secret key from the secret credentials as exoscale IAM get operation does not return the secret key
	secret := string(data[exoscalev1.SecretAccessKeyName])
	fmt.Println("after secret assignement in checkSecret")
	ctx.iamExoscaleKey.Secret = &secret
	fmt.Println("before exit checkSecret")
	return nil
}

func isNotFound(err error) bool {
	var errResp *url.Error
	if errors.As(err, &errResp) {
		return err.(*url.Error).Err.Error() == "resource not found"
	}
	return false
}
