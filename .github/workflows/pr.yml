name: PR Automation

on:
  pull_request: {}
  pull_request_target:
    types:
      - closed
    branches:
      - master

env:
  APP_NAME: provider-exoscale
  COMPONENT_REPO: vshn/component-appcat
  PUSH_UPBOUND: "True"
  PUSH_PACKAGE: "True"
  PUSH_IMAGE: "False"

jobs:
  check-allow-merge:
    if: github.event.pull_request.base.ref != 'develop' || github.event.pull_request.head.ref != 'master'
    runs-on: ubuntu-latest
    steps:
      # Labels in the context don't get updated so they are stuck at what's set during creation
      # We need this action to get current labels
      - name: Get current labels
        uses: snnaplab/get-labels-action@v1
      - name: Check if merge is allowed
        if: github.base_ref == 'master' && github.head_ref != 'develop'
        run: |
          ${{ contains(fromJSON(env.LABELS), 'hotfix') }} && exit 0
          echo "ERROR: You can only merge to master from develop or hotfixes."
          exit 1

  check-labels:
    # Act doesn't set a pull request number by default, so we skip if it's 0
    if: github.event.pull_request.number != 0 && (github.event.pull_request.base.ref != 'develop' || github.event.pull_request.head.ref != 'master')
    name: Check labels
    runs-on: ubuntu-latest
    steps:
      - name: Ignore from Changelog if merge to master
        uses: actions-ecosystem/action-add-labels@v1
        if: github.event.action != 'opened' && github.base_ref == 'master'
        with:
          labels: ignoreChangelog

      - uses: docker://agilepathway/pull-request-label-checker:v1.6.51
        with:
          one_of: major,minor,patch,documentation,dependency
          repo_token: ${{ secrets.GITHUB_TOKEN }}

  publish-branch-images:
    if: github.event.action != 'closed' && (github.event.pull_request.base.ref != 'develop' || github.event.pull_request.head.ref != 'master')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Determine Go version from go.mod
        run: echo "GO_VERSION=$(grep "go 1." go.mod | cut -d " " -f 2)" >> $GITHUB_ENV

      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Extract escaped branch name
        shell: bash
        run: echo "branch=$(echo ${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}} | sed 's/\//_/g' )" >> $GITHUB_OUTPUT
        id: extract_branch

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build branch and push image
        if: env.PUSH_IMAGE == 'true'
        run: |
          make docker-push-branchtag -e IMG_TAG="${{ steps.extract_branch.outputs.branch }}"
          make docker-push-branchtag -e IMG_TAG="${{ github.event.pull_request.head.sha }}"

      - name: Build branch and push package
        if: env.PUSH_PACKAGE == 'True'
        run: |
          make package-push-branchtag -e IMG_TAG="${{ steps.extract_branch.outputs.branch }}"
          make package-push-branchtag -e IMG_TAG="${{ github.event.pull_request.head.sha }}"

      - name: Login to Upbound
        if: env.PUSH_UPBOUND == 'true'
        uses: docker/login-action@v3
        with:
          registry: xpkg.upbound.io
          username: ${{ secrets.UPBOUND_MARKETPLACE_PUSH_ROBOT_USR }}
          password: ${{ secrets.UPBOUND_MARKETPLACE_PUSH_ROBOT_PSW }}

      - name: Build branch and push package to upbound
        if: env.PUSH_UPBOUND == 'true' && env.PUSH_PACKAGE == 'true'
        run: make package-push-branchtag -e IMG_TAG="${{ steps.extract_branch.outputs.branch }}" -e IMG_REPO=xpkg.upbound.io

  open-pr-component:
    runs-on: ubuntu-latest
    if: github.event.pull_request.number != 0 && github.event.action == 'opened' && (github.event.pull_request.base.ref != 'develop' || github.event.pull_request.head.ref != 'master')
    steps:
      - name: Get current labels
        uses: snnaplab/get-labels-action@v1

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: ${{ env.COMPONENT_REPO }}
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Extract branch name
        shell: bash
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
        id: extract_branch

      - name: Update defaults.yml and create branch
        run: |
          yq e '.parameters.appcat.images.${{ env.APP_NAME }}.tag="${{ steps.extract_branch.outputs.branch }}"' class/defaults.yml | diff -B class/defaults.yml - | patch class/defaults.yml - || true

          git --no-pager diff

      - name: Generate new golden
        # Act uses the host's docker to run containers, but then
        # they can't access the files that were previously cloned.
        if: github.event.pull_request.number != 0 && github.event.action == 'opened'
        run: |
          make gen-golden-all

      - name: Check if it's a hotfix
        id: hotfix_check
        run: |
          ${{ contains(fromJSON(env.LABELS), 'hotfix') }} && echo "base=master" >> $GITHUB_OUTPUT || echo "base=develop" >> $GITHUB_OUTPUT

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v7
        id: cpr
        with:
          token: ${{ secrets.COMPONENT_ACCESS_TOKEN }}
          title: ${{ github.event.pull_request.title }}
          body: "${{ github.event.pull_request.body}}\nLink: ${{ github.event.pull_request.html_url }}"
          branch: "${{ env.APP_NAME }}/${{ github.event.pull_request.number }}/${{ steps.extract_branch.outputs.branch }}"
          base: ${{ steps.hotfix_check.outputs.base }}
          draft: false

      - name: Add link to component PR
        uses: tzkhan/pr-update-action@v2
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
          head-branch-regex: "${{ steps.extract_branch.outputs.branch }}"
          body-template: |
            Component PR: ${{ steps.cpr.outputs.pull-request-url }}
          body-update-action: 'suffix'
          body-uppercase-base-match: false

      - name: Ignore from Changelog if merge to master
        uses: actions-ecosystem/action-add-labels@v1
        if: github.base_ref == 'master'
        with:
          labels: ignoreChangelog

